// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package almacen_data_womans_company.jd_ods_data_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: jd_ods_data Purpose: <br>
 * Description: informacion de airbnb <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class jd_ods_data implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "jd_ods_data";
	private final String projectName = "ALMACEN_DATA_WOMANS_COMPANY";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					jd_ods_data.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(jd_ods_data.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class carga_ods_airbnbStruct implements routines.system.IPersistableRow<carga_ods_airbnbStruct> {
		final static byte[] commonByteArrayLock_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[0];
		static byte[] commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long ID;

		public Long getID() {
			return this.ID;
		}

		public Long Host_ID;

		public Long getHost_ID() {
			return this.Host_ID;
		}

		public Double Host_Response_Rate;

		public Double getHost_Response_Rate() {
			return this.Host_Response_Rate;
		}

		public Double Host_Listings_Count;

		public Double getHost_Listings_Count() {
			return this.Host_Listings_Count;
		}

		public Double Host_Total_Listings_Count;

		public Double getHost_Total_Listings_Count() {
			return this.Host_Total_Listings_Count;
		}

		public String Neighbourhood_Cleansed;

		public String getNeighbourhood_Cleansed() {
			return this.Neighbourhood_Cleansed;
		}

		public String Neighbourhood_Group_Cleansed;

		public String getNeighbourhood_Group_Cleansed() {
			return this.Neighbourhood_Group_Cleansed;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		public String Market;

		public String getMarket() {
			return this.Market;
		}

		public Double Latitude;

		public Double getLatitude() {
			return this.Latitude;
		}

		public Double Longitude;

		public Double getLongitude() {
			return this.Longitude;
		}

		public String Property_Type;

		public String getProperty_Type() {
			return this.Property_Type;
		}

		public String Room_Type;

		public String getRoom_Type() {
			return this.Room_Type;
		}

		public Long Accommodates;

		public Long getAccommodates() {
			return this.Accommodates;
		}

		public Double Bathrooms;

		public Double getBathrooms() {
			return this.Bathrooms;
		}

		public Double Bedrooms;

		public Double getBedrooms() {
			return this.Bedrooms;
		}

		public Double beds;

		public Double getBeds() {
			return this.beds;
		}

		public Double Price;

		public Double getPrice() {
			return this.Price;
		}

		public Double Weekly_Price;

		public Double getWeekly_Price() {
			return this.Weekly_Price;
		}

		public Double Monthly_Price;

		public Double getMonthly_Price() {
			return this.Monthly_Price;
		}

		public Long Guests_Included;

		public Long getGuests_Included() {
			return this.Guests_Included;
		}

		public Long Extra_People;

		public Long getExtra_People() {
			return this.Extra_People;
		}

		public Long Minimum_Nights;

		public Long getMinimum_Nights() {
			return this.Minimum_Nights;
		}

		public Long Maximum_Nights;

		public Long getMaximum_Nights() {
			return this.Maximum_Nights;
		}

		public Long Number_of_Reviews;

		public Long getNumber_of_Reviews() {
			return this.Number_of_Reviews;
		}

		public Double Review_Scores_Rating;

		public Double getReview_Scores_Rating() {
			return this.Review_Scores_Rating;
		}

		public Double Review_Scores_Accuracy;

		public Double getReview_Scores_Accuracy() {
			return this.Review_Scores_Accuracy;
		}

		public Double Review_Scores_Cleanliness;

		public Double getReview_Scores_Cleanliness() {
			return this.Review_Scores_Cleanliness;
		}

		public Double Review_Scores_Checkin;

		public Double getReview_Scores_Checkin() {
			return this.Review_Scores_Checkin;
		}

		public Double Review_Scores_Communication;

		public Double getReview_Scores_Communication() {
			return this.Review_Scores_Communication;
		}

		public Double Review_Scores_Location;

		public Double getReview_Scores_Location() {
			return this.Review_Scores_Location;
		}

		public Double Review_Scores_Value;

		public Double getReview_Scores_Value() {
			return this.Review_Scores_Value;
		}

		public String Cancellation_Policy;

		public String getCancellation_Policy() {
			return this.Cancellation_Policy;
		}

		public Double Reviews_per_Month;

		public Double getReviews_per_Month() {
			return this.Reviews_per_Month;
		}

		public String Geolocation;

		public String getGeolocation() {
			return this.Geolocation;
		}

		public String Features;

		public String getFeatures() {
			return this.Features;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final carga_ods_airbnbStruct other = (carga_ods_airbnbStruct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(carga_ods_airbnbStruct other) {

			other.ID = this.ID;
			other.Host_ID = this.Host_ID;
			other.Host_Response_Rate = this.Host_Response_Rate;
			other.Host_Listings_Count = this.Host_Listings_Count;
			other.Host_Total_Listings_Count = this.Host_Total_Listings_Count;
			other.Neighbourhood_Cleansed = this.Neighbourhood_Cleansed;
			other.Neighbourhood_Group_Cleansed = this.Neighbourhood_Group_Cleansed;
			other.Zipcode = this.Zipcode;
			other.Market = this.Market;
			other.Latitude = this.Latitude;
			other.Longitude = this.Longitude;
			other.Property_Type = this.Property_Type;
			other.Room_Type = this.Room_Type;
			other.Accommodates = this.Accommodates;
			other.Bathrooms = this.Bathrooms;
			other.Bedrooms = this.Bedrooms;
			other.beds = this.beds;
			other.Price = this.Price;
			other.Weekly_Price = this.Weekly_Price;
			other.Monthly_Price = this.Monthly_Price;
			other.Guests_Included = this.Guests_Included;
			other.Extra_People = this.Extra_People;
			other.Minimum_Nights = this.Minimum_Nights;
			other.Maximum_Nights = this.Maximum_Nights;
			other.Number_of_Reviews = this.Number_of_Reviews;
			other.Review_Scores_Rating = this.Review_Scores_Rating;
			other.Review_Scores_Accuracy = this.Review_Scores_Accuracy;
			other.Review_Scores_Cleanliness = this.Review_Scores_Cleanliness;
			other.Review_Scores_Checkin = this.Review_Scores_Checkin;
			other.Review_Scores_Communication = this.Review_Scores_Communication;
			other.Review_Scores_Location = this.Review_Scores_Location;
			other.Review_Scores_Value = this.Review_Scores_Value;
			other.Cancellation_Policy = this.Cancellation_Policy;
			other.Reviews_per_Month = this.Reviews_per_Month;
			other.Geolocation = this.Geolocation;
			other.Features = this.Features;

		}

		public void copyKeysDataTo(carga_ods_airbnbStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length) {
					if (length < 1024 && commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length == 0) {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[1024];
					} else {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length);
				strReturn = new String(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length) {
					if (length < 1024 && commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length == 0) {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[1024];
					} else {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length);
				strReturn = new String(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_ID = null;
					} else {
						this.Host_ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Response_Rate = null;
					} else {
						this.Host_Response_Rate = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Listings_Count = null;
					} else {
						this.Host_Listings_Count = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Total_Listings_Count = null;
					} else {
						this.Host_Total_Listings_Count = dis.readDouble();
					}

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Latitude = null;
					} else {
						this.Latitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Longitude = null;
					} else {
						this.Longitude = dis.readDouble();
					}

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accommodates = null;
					} else {
						this.Accommodates = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bathrooms = null;
					} else {
						this.Bathrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bedrooms = null;
					} else {
						this.Bedrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.beds = null;
					} else {
						this.beds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weekly_Price = null;
					} else {
						this.Weekly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Monthly_Price = null;
					} else {
						this.Monthly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Guests_Included = null;
					} else {
						this.Guests_Included = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Extra_People = null;
					} else {
						this.Extra_People = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Minimum_Nights = null;
					} else {
						this.Minimum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Maximum_Nights = null;
					} else {
						this.Maximum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Number_of_Reviews = null;
					} else {
						this.Number_of_Reviews = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Rating = null;
					} else {
						this.Review_Scores_Rating = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Accuracy = null;
					} else {
						this.Review_Scores_Accuracy = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Cleanliness = null;
					} else {
						this.Review_Scores_Cleanliness = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Checkin = null;
					} else {
						this.Review_Scores_Checkin = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Communication = null;
					} else {
						this.Review_Scores_Communication = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Location = null;
					} else {
						this.Review_Scores_Location = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Value = null;
					} else {
						this.Review_Scores_Value = dis.readDouble();
					}

					this.Cancellation_Policy = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Reviews_per_Month = null;
					} else {
						this.Reviews_per_Month = dis.readDouble();
					}

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_ID = null;
					} else {
						this.Host_ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Response_Rate = null;
					} else {
						this.Host_Response_Rate = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Listings_Count = null;
					} else {
						this.Host_Listings_Count = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Total_Listings_Count = null;
					} else {
						this.Host_Total_Listings_Count = dis.readDouble();
					}

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Latitude = null;
					} else {
						this.Latitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Longitude = null;
					} else {
						this.Longitude = dis.readDouble();
					}

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accommodates = null;
					} else {
						this.Accommodates = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bathrooms = null;
					} else {
						this.Bathrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bedrooms = null;
					} else {
						this.Bedrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.beds = null;
					} else {
						this.beds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weekly_Price = null;
					} else {
						this.Weekly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Monthly_Price = null;
					} else {
						this.Monthly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Guests_Included = null;
					} else {
						this.Guests_Included = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Extra_People = null;
					} else {
						this.Extra_People = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Minimum_Nights = null;
					} else {
						this.Minimum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Maximum_Nights = null;
					} else {
						this.Maximum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Number_of_Reviews = null;
					} else {
						this.Number_of_Reviews = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Rating = null;
					} else {
						this.Review_Scores_Rating = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Accuracy = null;
					} else {
						this.Review_Scores_Accuracy = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Cleanliness = null;
					} else {
						this.Review_Scores_Cleanliness = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Checkin = null;
					} else {
						this.Review_Scores_Checkin = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Communication = null;
					} else {
						this.Review_Scores_Communication = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Location = null;
					} else {
						this.Review_Scores_Location = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Value = null;
					} else {
						this.Review_Scores_Value = dis.readDouble();
					}

					this.Cancellation_Policy = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Reviews_per_Month = null;
					} else {
						this.Reviews_per_Month = dis.readDouble();
					}

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// Long

				if (this.Host_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Host_ID);
				}

				// Double

				if (this.Host_Response_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Response_Rate);
				}

				// Double

				if (this.Host_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Listings_Count);
				}

				// Double

				if (this.Host_Total_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Total_Listings_Count);
				}

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// Double

				if (this.Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Latitude);
				}

				// Double

				if (this.Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Longitude);
				}

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// Long

				if (this.Accommodates == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Accommodates);
				}

				// Double

				if (this.Bathrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bathrooms);
				}

				// Double

				if (this.Bedrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bedrooms);
				}

				// Double

				if (this.beds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.beds);
				}

				// Double

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Price);
				}

				// Double

				if (this.Weekly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weekly_Price);
				}

				// Double

				if (this.Monthly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Monthly_Price);
				}

				// Long

				if (this.Guests_Included == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Guests_Included);
				}

				// Long

				if (this.Extra_People == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Extra_People);
				}

				// Long

				if (this.Minimum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Minimum_Nights);
				}

				// Long

				if (this.Maximum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Maximum_Nights);
				}

				// Long

				if (this.Number_of_Reviews == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Number_of_Reviews);
				}

				// Double

				if (this.Review_Scores_Rating == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Rating);
				}

				// Double

				if (this.Review_Scores_Accuracy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Accuracy);
				}

				// Double

				if (this.Review_Scores_Cleanliness == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Cleanliness);
				}

				// Double

				if (this.Review_Scores_Checkin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Checkin);
				}

				// Double

				if (this.Review_Scores_Communication == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Communication);
				}

				// Double

				if (this.Review_Scores_Location == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Location);
				}

				// Double

				if (this.Review_Scores_Value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Value);
				}

				// String

				writeString(this.Cancellation_Policy, dos);

				// Double

				if (this.Reviews_per_Month == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Reviews_per_Month);
				}

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// Long

				if (this.Host_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Host_ID);
				}

				// Double

				if (this.Host_Response_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Response_Rate);
				}

				// Double

				if (this.Host_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Listings_Count);
				}

				// Double

				if (this.Host_Total_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Total_Listings_Count);
				}

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// Double

				if (this.Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Latitude);
				}

				// Double

				if (this.Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Longitude);
				}

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// Long

				if (this.Accommodates == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Accommodates);
				}

				// Double

				if (this.Bathrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bathrooms);
				}

				// Double

				if (this.Bedrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bedrooms);
				}

				// Double

				if (this.beds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.beds);
				}

				// Double

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Price);
				}

				// Double

				if (this.Weekly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weekly_Price);
				}

				// Double

				if (this.Monthly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Monthly_Price);
				}

				// Long

				if (this.Guests_Included == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Guests_Included);
				}

				// Long

				if (this.Extra_People == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Extra_People);
				}

				// Long

				if (this.Minimum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Minimum_Nights);
				}

				// Long

				if (this.Maximum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Maximum_Nights);
				}

				// Long

				if (this.Number_of_Reviews == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Number_of_Reviews);
				}

				// Double

				if (this.Review_Scores_Rating == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Rating);
				}

				// Double

				if (this.Review_Scores_Accuracy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Accuracy);
				}

				// Double

				if (this.Review_Scores_Cleanliness == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Cleanliness);
				}

				// Double

				if (this.Review_Scores_Checkin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Checkin);
				}

				// Double

				if (this.Review_Scores_Communication == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Communication);
				}

				// Double

				if (this.Review_Scores_Location == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Location);
				}

				// Double

				if (this.Review_Scores_Value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Value);
				}

				// String

				writeString(this.Cancellation_Policy, dos);

				// Double

				if (this.Reviews_per_Month == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Reviews_per_Month);
				}

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Host_ID=" + String.valueOf(Host_ID));
			sb.append(",Host_Response_Rate=" + String.valueOf(Host_Response_Rate));
			sb.append(",Host_Listings_Count=" + String.valueOf(Host_Listings_Count));
			sb.append(",Host_Total_Listings_Count=" + String.valueOf(Host_Total_Listings_Count));
			sb.append(",Neighbourhood_Cleansed=" + Neighbourhood_Cleansed);
			sb.append(",Neighbourhood_Group_Cleansed=" + Neighbourhood_Group_Cleansed);
			sb.append(",Zipcode=" + Zipcode);
			sb.append(",Market=" + Market);
			sb.append(",Latitude=" + String.valueOf(Latitude));
			sb.append(",Longitude=" + String.valueOf(Longitude));
			sb.append(",Property_Type=" + Property_Type);
			sb.append(",Room_Type=" + Room_Type);
			sb.append(",Accommodates=" + String.valueOf(Accommodates));
			sb.append(",Bathrooms=" + String.valueOf(Bathrooms));
			sb.append(",Bedrooms=" + String.valueOf(Bedrooms));
			sb.append(",beds=" + String.valueOf(beds));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",Weekly_Price=" + String.valueOf(Weekly_Price));
			sb.append(",Monthly_Price=" + String.valueOf(Monthly_Price));
			sb.append(",Guests_Included=" + String.valueOf(Guests_Included));
			sb.append(",Extra_People=" + String.valueOf(Extra_People));
			sb.append(",Minimum_Nights=" + String.valueOf(Minimum_Nights));
			sb.append(",Maximum_Nights=" + String.valueOf(Maximum_Nights));
			sb.append(",Number_of_Reviews=" + String.valueOf(Number_of_Reviews));
			sb.append(",Review_Scores_Rating=" + String.valueOf(Review_Scores_Rating));
			sb.append(",Review_Scores_Accuracy=" + String.valueOf(Review_Scores_Accuracy));
			sb.append(",Review_Scores_Cleanliness=" + String.valueOf(Review_Scores_Cleanliness));
			sb.append(",Review_Scores_Checkin=" + String.valueOf(Review_Scores_Checkin));
			sb.append(",Review_Scores_Communication=" + String.valueOf(Review_Scores_Communication));
			sb.append(",Review_Scores_Location=" + String.valueOf(Review_Scores_Location));
			sb.append(",Review_Scores_Value=" + String.valueOf(Review_Scores_Value));
			sb.append(",Cancellation_Policy=" + Cancellation_Policy);
			sb.append(",Reviews_per_Month=" + String.valueOf(Reviews_per_Month));
			sb.append(",Geolocation=" + Geolocation);
			sb.append(",Features=" + Features);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(carga_ods_airbnbStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[0];
		static byte[] commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[0];

		public Long ID;

		public Long getID() {
			return this.ID;
		}

		public Long Host_ID;

		public Long getHost_ID() {
			return this.Host_ID;
		}

		public Double Host_Response_Rate;

		public Double getHost_Response_Rate() {
			return this.Host_Response_Rate;
		}

		public Double Host_Listings_Count;

		public Double getHost_Listings_Count() {
			return this.Host_Listings_Count;
		}

		public Double Host_Total_Listings_Count;

		public Double getHost_Total_Listings_Count() {
			return this.Host_Total_Listings_Count;
		}

		public String Neighbourhood_Cleansed;

		public String getNeighbourhood_Cleansed() {
			return this.Neighbourhood_Cleansed;
		}

		public String Neighbourhood_Group_Cleansed;

		public String getNeighbourhood_Group_Cleansed() {
			return this.Neighbourhood_Group_Cleansed;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		public String Market;

		public String getMarket() {
			return this.Market;
		}

		public Double Latitude;

		public Double getLatitude() {
			return this.Latitude;
		}

		public Double Longitude;

		public Double getLongitude() {
			return this.Longitude;
		}

		public String Property_Type;

		public String getProperty_Type() {
			return this.Property_Type;
		}

		public String Room_Type;

		public String getRoom_Type() {
			return this.Room_Type;
		}

		public Long Accommodates;

		public Long getAccommodates() {
			return this.Accommodates;
		}

		public Double Bathrooms;

		public Double getBathrooms() {
			return this.Bathrooms;
		}

		public Double Bedrooms;

		public Double getBedrooms() {
			return this.Bedrooms;
		}

		public Double Beds;

		public Double getBeds() {
			return this.Beds;
		}

		public Double Price;

		public Double getPrice() {
			return this.Price;
		}

		public Double Weekly_Price;

		public Double getWeekly_Price() {
			return this.Weekly_Price;
		}

		public Double Monthly_Price;

		public Double getMonthly_Price() {
			return this.Monthly_Price;
		}

		public Long Guests_Included;

		public Long getGuests_Included() {
			return this.Guests_Included;
		}

		public Long Extra_People;

		public Long getExtra_People() {
			return this.Extra_People;
		}

		public Long Minimum_Nights;

		public Long getMinimum_Nights() {
			return this.Minimum_Nights;
		}

		public Long Maximum_Nights;

		public Long getMaximum_Nights() {
			return this.Maximum_Nights;
		}

		public Long Number_of_Reviews;

		public Long getNumber_of_Reviews() {
			return this.Number_of_Reviews;
		}

		public Double Review_Scores_Rating;

		public Double getReview_Scores_Rating() {
			return this.Review_Scores_Rating;
		}

		public Double Review_Scores_Accuracy;

		public Double getReview_Scores_Accuracy() {
			return this.Review_Scores_Accuracy;
		}

		public Double Review_Scores_Cleanliness;

		public Double getReview_Scores_Cleanliness() {
			return this.Review_Scores_Cleanliness;
		}

		public Double Review_Scores_Checkin;

		public Double getReview_Scores_Checkin() {
			return this.Review_Scores_Checkin;
		}

		public Double Review_Scores_Communication;

		public Double getReview_Scores_Communication() {
			return this.Review_Scores_Communication;
		}

		public Double Review_Scores_Location;

		public Double getReview_Scores_Location() {
			return this.Review_Scores_Location;
		}

		public Double Review_Scores_Value;

		public Double getReview_Scores_Value() {
			return this.Review_Scores_Value;
		}

		public String Cancellation_Policy;

		public String getCancellation_Policy() {
			return this.Cancellation_Policy;
		}

		public Double Reviews_per_Month;

		public Double getReviews_per_Month() {
			return this.Reviews_per_Month;
		}

		public String Geolocation;

		public String getGeolocation() {
			return this.Geolocation;
		}

		public String Features;

		public String getFeatures() {
			return this.Features;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length) {
					if (length < 1024 && commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length == 0) {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[1024];
					} else {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length);
				strReturn = new String(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length) {
					if (length < 1024 && commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data.length == 0) {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[1024];
					} else {
						commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length);
				strReturn = new String(commonByteArray_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_ID = null;
					} else {
						this.Host_ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Response_Rate = null;
					} else {
						this.Host_Response_Rate = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Listings_Count = null;
					} else {
						this.Host_Listings_Count = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Total_Listings_Count = null;
					} else {
						this.Host_Total_Listings_Count = dis.readDouble();
					}

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Latitude = null;
					} else {
						this.Latitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Longitude = null;
					} else {
						this.Longitude = dis.readDouble();
					}

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accommodates = null;
					} else {
						this.Accommodates = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bathrooms = null;
					} else {
						this.Bathrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bedrooms = null;
					} else {
						this.Bedrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Beds = null;
					} else {
						this.Beds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weekly_Price = null;
					} else {
						this.Weekly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Monthly_Price = null;
					} else {
						this.Monthly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Guests_Included = null;
					} else {
						this.Guests_Included = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Extra_People = null;
					} else {
						this.Extra_People = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Minimum_Nights = null;
					} else {
						this.Minimum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Maximum_Nights = null;
					} else {
						this.Maximum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Number_of_Reviews = null;
					} else {
						this.Number_of_Reviews = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Rating = null;
					} else {
						this.Review_Scores_Rating = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Accuracy = null;
					} else {
						this.Review_Scores_Accuracy = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Cleanliness = null;
					} else {
						this.Review_Scores_Cleanliness = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Checkin = null;
					} else {
						this.Review_Scores_Checkin = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Communication = null;
					} else {
						this.Review_Scores_Communication = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Location = null;
					} else {
						this.Review_Scores_Location = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Value = null;
					} else {
						this.Review_Scores_Value = dis.readDouble();
					}

					this.Cancellation_Policy = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Reviews_per_Month = null;
					} else {
						this.Reviews_per_Month = dis.readDouble();
					}

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ALMACEN_DATA_WOMANS_COMPANY_jd_ods_data) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.ID = null;
					} else {
						this.ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_ID = null;
					} else {
						this.Host_ID = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Response_Rate = null;
					} else {
						this.Host_Response_Rate = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Listings_Count = null;
					} else {
						this.Host_Listings_Count = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Host_Total_Listings_Count = null;
					} else {
						this.Host_Total_Listings_Count = dis.readDouble();
					}

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Latitude = null;
					} else {
						this.Latitude = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Longitude = null;
					} else {
						this.Longitude = dis.readDouble();
					}

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Accommodates = null;
					} else {
						this.Accommodates = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bathrooms = null;
					} else {
						this.Bathrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Bedrooms = null;
					} else {
						this.Bedrooms = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Beds = null;
					} else {
						this.Beds = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Price = null;
					} else {
						this.Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Weekly_Price = null;
					} else {
						this.Weekly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Monthly_Price = null;
					} else {
						this.Monthly_Price = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Guests_Included = null;
					} else {
						this.Guests_Included = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Extra_People = null;
					} else {
						this.Extra_People = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Minimum_Nights = null;
					} else {
						this.Minimum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Maximum_Nights = null;
					} else {
						this.Maximum_Nights = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Number_of_Reviews = null;
					} else {
						this.Number_of_Reviews = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Rating = null;
					} else {
						this.Review_Scores_Rating = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Accuracy = null;
					} else {
						this.Review_Scores_Accuracy = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Cleanliness = null;
					} else {
						this.Review_Scores_Cleanliness = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Checkin = null;
					} else {
						this.Review_Scores_Checkin = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Communication = null;
					} else {
						this.Review_Scores_Communication = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Location = null;
					} else {
						this.Review_Scores_Location = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Review_Scores_Value = null;
					} else {
						this.Review_Scores_Value = dis.readDouble();
					}

					this.Cancellation_Policy = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Reviews_per_Month = null;
					} else {
						this.Reviews_per_Month = dis.readDouble();
					}

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// Long

				if (this.Host_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Host_ID);
				}

				// Double

				if (this.Host_Response_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Response_Rate);
				}

				// Double

				if (this.Host_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Listings_Count);
				}

				// Double

				if (this.Host_Total_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Total_Listings_Count);
				}

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// Double

				if (this.Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Latitude);
				}

				// Double

				if (this.Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Longitude);
				}

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// Long

				if (this.Accommodates == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Accommodates);
				}

				// Double

				if (this.Bathrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bathrooms);
				}

				// Double

				if (this.Bedrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bedrooms);
				}

				// Double

				if (this.Beds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Beds);
				}

				// Double

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Price);
				}

				// Double

				if (this.Weekly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weekly_Price);
				}

				// Double

				if (this.Monthly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Monthly_Price);
				}

				// Long

				if (this.Guests_Included == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Guests_Included);
				}

				// Long

				if (this.Extra_People == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Extra_People);
				}

				// Long

				if (this.Minimum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Minimum_Nights);
				}

				// Long

				if (this.Maximum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Maximum_Nights);
				}

				// Long

				if (this.Number_of_Reviews == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Number_of_Reviews);
				}

				// Double

				if (this.Review_Scores_Rating == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Rating);
				}

				// Double

				if (this.Review_Scores_Accuracy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Accuracy);
				}

				// Double

				if (this.Review_Scores_Cleanliness == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Cleanliness);
				}

				// Double

				if (this.Review_Scores_Checkin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Checkin);
				}

				// Double

				if (this.Review_Scores_Communication == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Communication);
				}

				// Double

				if (this.Review_Scores_Location == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Location);
				}

				// Double

				if (this.Review_Scores_Value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Value);
				}

				// String

				writeString(this.Cancellation_Policy, dos);

				// Double

				if (this.Reviews_per_Month == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Reviews_per_Month);
				}

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Long

				if (this.ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.ID);
				}

				// Long

				if (this.Host_ID == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Host_ID);
				}

				// Double

				if (this.Host_Response_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Response_Rate);
				}

				// Double

				if (this.Host_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Listings_Count);
				}

				// Double

				if (this.Host_Total_Listings_Count == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Host_Total_Listings_Count);
				}

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// Double

				if (this.Latitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Latitude);
				}

				// Double

				if (this.Longitude == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Longitude);
				}

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// Long

				if (this.Accommodates == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Accommodates);
				}

				// Double

				if (this.Bathrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bathrooms);
				}

				// Double

				if (this.Bedrooms == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Bedrooms);
				}

				// Double

				if (this.Beds == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Beds);
				}

				// Double

				if (this.Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Price);
				}

				// Double

				if (this.Weekly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Weekly_Price);
				}

				// Double

				if (this.Monthly_Price == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Monthly_Price);
				}

				// Long

				if (this.Guests_Included == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Guests_Included);
				}

				// Long

				if (this.Extra_People == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Extra_People);
				}

				// Long

				if (this.Minimum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Minimum_Nights);
				}

				// Long

				if (this.Maximum_Nights == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Maximum_Nights);
				}

				// Long

				if (this.Number_of_Reviews == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Number_of_Reviews);
				}

				// Double

				if (this.Review_Scores_Rating == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Rating);
				}

				// Double

				if (this.Review_Scores_Accuracy == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Accuracy);
				}

				// Double

				if (this.Review_Scores_Cleanliness == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Cleanliness);
				}

				// Double

				if (this.Review_Scores_Checkin == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Checkin);
				}

				// Double

				if (this.Review_Scores_Communication == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Communication);
				}

				// Double

				if (this.Review_Scores_Location == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Location);
				}

				// Double

				if (this.Review_Scores_Value == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Review_Scores_Value);
				}

				// String

				writeString(this.Cancellation_Policy, dos);

				// Double

				if (this.Reviews_per_Month == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Reviews_per_Month);
				}

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Host_ID=" + String.valueOf(Host_ID));
			sb.append(",Host_Response_Rate=" + String.valueOf(Host_Response_Rate));
			sb.append(",Host_Listings_Count=" + String.valueOf(Host_Listings_Count));
			sb.append(",Host_Total_Listings_Count=" + String.valueOf(Host_Total_Listings_Count));
			sb.append(",Neighbourhood_Cleansed=" + Neighbourhood_Cleansed);
			sb.append(",Neighbourhood_Group_Cleansed=" + Neighbourhood_Group_Cleansed);
			sb.append(",Zipcode=" + Zipcode);
			sb.append(",Market=" + Market);
			sb.append(",Latitude=" + String.valueOf(Latitude));
			sb.append(",Longitude=" + String.valueOf(Longitude));
			sb.append(",Property_Type=" + Property_Type);
			sb.append(",Room_Type=" + Room_Type);
			sb.append(",Accommodates=" + String.valueOf(Accommodates));
			sb.append(",Bathrooms=" + String.valueOf(Bathrooms));
			sb.append(",Bedrooms=" + String.valueOf(Bedrooms));
			sb.append(",Beds=" + String.valueOf(Beds));
			sb.append(",Price=" + String.valueOf(Price));
			sb.append(",Weekly_Price=" + String.valueOf(Weekly_Price));
			sb.append(",Monthly_Price=" + String.valueOf(Monthly_Price));
			sb.append(",Guests_Included=" + String.valueOf(Guests_Included));
			sb.append(",Extra_People=" + String.valueOf(Extra_People));
			sb.append(",Minimum_Nights=" + String.valueOf(Minimum_Nights));
			sb.append(",Maximum_Nights=" + String.valueOf(Maximum_Nights));
			sb.append(",Number_of_Reviews=" + String.valueOf(Number_of_Reviews));
			sb.append(",Review_Scores_Rating=" + String.valueOf(Review_Scores_Rating));
			sb.append(",Review_Scores_Accuracy=" + String.valueOf(Review_Scores_Accuracy));
			sb.append(",Review_Scores_Cleanliness=" + String.valueOf(Review_Scores_Cleanliness));
			sb.append(",Review_Scores_Checkin=" + String.valueOf(Review_Scores_Checkin));
			sb.append(",Review_Scores_Communication=" + String.valueOf(Review_Scores_Communication));
			sb.append(",Review_Scores_Location=" + String.valueOf(Review_Scores_Location));
			sb.append(",Review_Scores_Value=" + String.valueOf(Review_Scores_Value));
			sb.append(",Cancellation_Policy=" + Cancellation_Policy);
			sb.append(",Reviews_per_Month=" + String.valueOf(Reviews_per_Month));
			sb.append(",Geolocation=" + Geolocation);
			sb.append(",Features=" + Features);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				carga_ods_airbnbStruct carga_ods_airbnb = new carga_ods_airbnbStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "carga_ods_airbnb");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "Data_Womans_Company";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("data");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("data");
				}

				int updateKeyCount_tDBOutput_1 = 1;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				} else if (updateKeyCount_tDBOutput_1 == 36 && true) {
					System.err.println("For update, every Schema column can not be a key");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/"
						+ "ods_airbnb-listings";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:hW54gvqy3hIKGyfY9HeSfulv2MHZUJe92IfuR0aTltWi9Dua");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				int rsTruncCountNumber_tDBOutput_1 = 0;
				try (java.sql.Statement stmtTruncCount_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					try (java.sql.ResultSet rsTruncCount_tDBOutput_1 = stmtTruncCount_tDBOutput_1
							.executeQuery("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1 + "\"")) {
						if (rsTruncCount_tDBOutput_1.next()) {
							rsTruncCountNumber_tDBOutput_1 = rsTruncCount_tDBOutput_1.getInt(1);
						}
					}
				}
				try (java.sql.Statement stmtTrunc_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtTrunc_tDBOutput_1.executeUpdate("TRUNCATE TABLE \"" + tableName_tDBOutput_1 + "\"");
					deletedCount_tDBOutput_1 += rsTruncCountNumber_tDBOutput_1;
				}
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"Host ID\" = ?,\"Host Response Rate\" = ?,\"Host Listings Count\" = ?,\"Host Total Listings Count\" = ?,\"Neighbourhood Cleansed\" = ?,\"Neighbourhood Group Cleansed\" = ?,\"Zipcode\" = ?,\"Market\" = ?,\"Latitude\" = ?,\"Longitude\" = ?,\"Property Type\" = ?,\"Room Type\" = ?,\"Accommodates\" = ?,\"Bathrooms\" = ?,\"Bedrooms\" = ?,\"beds\" = ?,\"Price\" = ?,\"Weekly Price\" = ?,\"Monthly Price\" = ?,\"Guests Included\" = ?,\"Extra People\" = ?,\"Minimum Nights\" = ?,\"Maximum Nights\" = ?,\"Number of Reviews\" = ?,\"Review Scores Rating\" = ?,\"Review Scores Accuracy\" = ?,\"Review Scores Cleanliness\" = ?,\"Review Scores Checkin\" = ?,\"Review Scores Communication\" = ?,\"Review Scores Location\" = ?,\"Review Scores Value\" = ?,\"Cancellation Policy\" = ?,\"Reviews per Month\" = ?,\"Geolocation\" = ?,\"Features\" = ? WHERE \"ID\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"ID\",\"Host ID\",\"Host Response Rate\",\"Host Listings Count\",\"Host Total Listings Count\",\"Neighbourhood Cleansed\",\"Neighbourhood Group Cleansed\",\"Zipcode\",\"Market\",\"Latitude\",\"Longitude\",\"Property Type\",\"Room Type\",\"Accommodates\",\"Bathrooms\",\"Bedrooms\",\"beds\",\"Price\",\"Weekly Price\",\"Monthly Price\",\"Guests Included\",\"Extra People\",\"Minimum Nights\",\"Maximum Nights\",\"Number of Reviews\",\"Review Scores Rating\",\"Review Scores Accuracy\",\"Review Scores Cleanliness\",\"Review Scores Checkin\",\"Review Scores Communication\",\"Review Scores Location\",\"Review Scores Value\",\"Cancellation Policy\",\"Reviews per Month\",\"Geolocation\",\"Features\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				carga_ods_airbnbStruct carga_ods_airbnb_tmp = new carga_ods_airbnbStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "postgres";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Z+B6miCQ8vLGaO4YUdf9mqvVCscgku7m++7kcdSRiXe+XWvZ");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "airbnb-listings";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"Data_Womans_Company\".\"data\".\"ID\", \n  \"Data_Womans_Company\".\"data\".\"Host ID\", \n  \"Data_Womans_Co"
						+ "mpany\".\"data\".\"Host Response Rate\", \n  \"Data_Womans_Company\".\"data\".\"Host Listings Count\", \n  \"Data_Womans_C"
						+ "ompany\".\"data\".\"Host Total Listings Count\", \n  \"Data_Womans_Company\".\"data\".\"Neighbourhood Cleansed\", \n  \"Da"
						+ "ta_Womans_Company\".\"data\".\"Neighbourhood Group Cleansed\", \n  \"Data_Womans_Company\".\"data\".\"Zipcode\", \n  \"Dat"
						+ "a_Womans_Company\".\"data\".\"Market\", \n  \"Data_Womans_Company\".\"data\".\"Latitude\", \n  \"Data_Womans_Company\".\"d"
						+ "ata\".\"Longitude\", \n  \"Data_Womans_Company\".\"data\".\"Property Type\", \n  \"Data_Womans_Company\".\"data\".\"Room T"
						+ "ype\", \n  \"Data_Womans_Company\".\"data\".\"Accommodates\", \n  \"Data_Womans_Company\".\"data\".\"Bathrooms\", \n  \"Dat"
						+ "a_Womans_Company\".\"data\".\"Bedrooms\", \n  \"Data_Womans_Company\".\"data\".\"Beds\", \n  \"Data_Womans_Company\".\"dat"
						+ "a\".\"Price\", \n  \"Data_Womans_Company\".\"data\".\"Weekly Price\", \n  \"Data_Womans_Company\".\"data\".\"Monthly Price"
						+ "\", \n  \"Data_Womans_Company\".\"data\".\"Guests Included\", \n  \"Data_Womans_Company\".\"data\".\"Extra People\", \n  \""
						+ "Data_Womans_Company\".\"data\".\"Minimum Nights\", \n  \"Data_Womans_Company\".\"data\".\"Maximum Nights\", \n  \"Data_Wom"
						+ "ans_Company\".\"data\".\"Number of Reviews\", \n  \"Data_Womans_Company\".\"data\".\"Review Scores Rating\", \n  \"Data_Wo"
						+ "mans_Company\".\"data\".\"Review Scores Accuracy\", \n  \"Data_Womans_Company\".\"data\".\"Review Scores Cleanliness\", \n"
						+ "  \"Data_Womans_Company\".\"data\".\"Review Scores Checkin\", \n  \"Data_Womans_Company\".\"data\".\"Review Scores Commun"
						+ "ication\", \n  \"Data_Womans_Company\".\"data\".\"Review Scores Location\", \n  \"Data_Womans_Company\".\"data\".\"Review "
						+ "Scores Value\", \n  \"Data_Womans_Company\".\"data\".\"Cancellation Policy\", \n  \"Data_Womans_Company\".\"data\".\"Revie"
						+ "ws per Month\", \n  \"Data_Womans_Company\".\"data\".\"Geolocation\", \n  \"Data_Womans_Company\".\"data\".\"Features\"\nFR"
						+ "OM \"Data_Womans_Company\".\"data\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ID = null;
						} else {

							row1.ID = rs_tDBInput_1.getLong(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Host_ID = null;
						} else {

							row1.Host_ID = rs_tDBInput_1.getLong(2);
							if (rs_tDBInput_1.wasNull()) {
								row1.Host_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Host_Response_Rate = null;
						} else {

							row1.Host_Response_Rate = rs_tDBInput_1.getDouble(3);
							if (rs_tDBInput_1.wasNull()) {
								row1.Host_Response_Rate = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Host_Listings_Count = null;
						} else {

							row1.Host_Listings_Count = rs_tDBInput_1.getDouble(4);
							if (rs_tDBInput_1.wasNull()) {
								row1.Host_Listings_Count = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.Host_Total_Listings_Count = null;
						} else {

							row1.Host_Total_Listings_Count = rs_tDBInput_1.getDouble(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.Host_Total_Listings_Count = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.Neighbourhood_Cleansed = null;
						} else {

							row1.Neighbourhood_Cleansed = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.Neighbourhood_Group_Cleansed = null;
						} else {

							row1.Neighbourhood_Group_Cleansed = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Zipcode = null;
						} else {

							row1.Zipcode = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.Market = null;
						} else {

							row1.Market = routines.system.JDBCUtil.getString(rs_tDBInput_1, 9, false);
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.Latitude = null;
						} else {

							row1.Latitude = rs_tDBInput_1.getDouble(10);
							if (rs_tDBInput_1.wasNull()) {
								row1.Latitude = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.Longitude = null;
						} else {

							row1.Longitude = rs_tDBInput_1.getDouble(11);
							if (rs_tDBInput_1.wasNull()) {
								row1.Longitude = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.Property_Type = null;
						} else {

							row1.Property_Type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 12, false);
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.Room_Type = null;
						} else {

							row1.Room_Type = routines.system.JDBCUtil.getString(rs_tDBInput_1, 13, false);
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.Accommodates = null;
						} else {

							row1.Accommodates = rs_tDBInput_1.getLong(14);
							if (rs_tDBInput_1.wasNull()) {
								row1.Accommodates = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.Bathrooms = null;
						} else {

							row1.Bathrooms = rs_tDBInput_1.getDouble(15);
							if (rs_tDBInput_1.wasNull()) {
								row1.Bathrooms = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.Bedrooms = null;
						} else {

							row1.Bedrooms = rs_tDBInput_1.getDouble(16);
							if (rs_tDBInput_1.wasNull()) {
								row1.Bedrooms = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.Beds = null;
						} else {

							row1.Beds = rs_tDBInput_1.getDouble(17);
							if (rs_tDBInput_1.wasNull()) {
								row1.Beds = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.Price = null;
						} else {

							row1.Price = rs_tDBInput_1.getDouble(18);
							if (rs_tDBInput_1.wasNull()) {
								row1.Price = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.Weekly_Price = null;
						} else {

							row1.Weekly_Price = rs_tDBInput_1.getDouble(19);
							if (rs_tDBInput_1.wasNull()) {
								row1.Weekly_Price = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.Monthly_Price = null;
						} else {

							row1.Monthly_Price = rs_tDBInput_1.getDouble(20);
							if (rs_tDBInput_1.wasNull()) {
								row1.Monthly_Price = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.Guests_Included = null;
						} else {

							row1.Guests_Included = rs_tDBInput_1.getLong(21);
							if (rs_tDBInput_1.wasNull()) {
								row1.Guests_Included = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.Extra_People = null;
						} else {

							row1.Extra_People = rs_tDBInput_1.getLong(22);
							if (rs_tDBInput_1.wasNull()) {
								row1.Extra_People = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.Minimum_Nights = null;
						} else {

							row1.Minimum_Nights = rs_tDBInput_1.getLong(23);
							if (rs_tDBInput_1.wasNull()) {
								row1.Minimum_Nights = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.Maximum_Nights = null;
						} else {

							row1.Maximum_Nights = rs_tDBInput_1.getLong(24);
							if (rs_tDBInput_1.wasNull()) {
								row1.Maximum_Nights = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.Number_of_Reviews = null;
						} else {

							row1.Number_of_Reviews = rs_tDBInput_1.getLong(25);
							if (rs_tDBInput_1.wasNull()) {
								row1.Number_of_Reviews = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.Review_Scores_Rating = null;
						} else {

							row1.Review_Scores_Rating = rs_tDBInput_1.getDouble(26);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Rating = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.Review_Scores_Accuracy = null;
						} else {

							row1.Review_Scores_Accuracy = rs_tDBInput_1.getDouble(27);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Accuracy = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 28) {
							row1.Review_Scores_Cleanliness = null;
						} else {

							row1.Review_Scores_Cleanliness = rs_tDBInput_1.getDouble(28);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Cleanliness = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 29) {
							row1.Review_Scores_Checkin = null;
						} else {

							row1.Review_Scores_Checkin = rs_tDBInput_1.getDouble(29);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Checkin = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 30) {
							row1.Review_Scores_Communication = null;
						} else {

							row1.Review_Scores_Communication = rs_tDBInput_1.getDouble(30);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Communication = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 31) {
							row1.Review_Scores_Location = null;
						} else {

							row1.Review_Scores_Location = rs_tDBInput_1.getDouble(31);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Location = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 32) {
							row1.Review_Scores_Value = null;
						} else {

							row1.Review_Scores_Value = rs_tDBInput_1.getDouble(32);
							if (rs_tDBInput_1.wasNull()) {
								row1.Review_Scores_Value = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 33) {
							row1.Cancellation_Policy = null;
						} else {

							row1.Cancellation_Policy = routines.system.JDBCUtil.getString(rs_tDBInput_1, 33, false);
						}
						if (colQtyInRs_tDBInput_1 < 34) {
							row1.Reviews_per_Month = null;
						} else {

							row1.Reviews_per_Month = rs_tDBInput_1.getDouble(34);
							if (rs_tDBInput_1.wasNull()) {
								row1.Reviews_per_Month = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 35) {
							row1.Geolocation = null;
						} else {

							row1.Geolocation = routines.system.JDBCUtil.getString(rs_tDBInput_1, 35, false);
						}
						if (colQtyInRs_tDBInput_1 < 36) {
							row1.Features = null;
						} else {

							row1.Features = routines.system.JDBCUtil.getString(rs_tDBInput_1, 36, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							carga_ods_airbnb = null;

// # Output table : 'carga_ods_airbnb'
							carga_ods_airbnb_tmp.ID = row1.ID;
							carga_ods_airbnb_tmp.Host_ID = row1.Host_ID;
							carga_ods_airbnb_tmp.Host_Response_Rate = row1.Host_Response_Rate;
							carga_ods_airbnb_tmp.Host_Listings_Count = row1.Host_Listings_Count;
							carga_ods_airbnb_tmp.Host_Total_Listings_Count = row1.Host_Total_Listings_Count;
							carga_ods_airbnb_tmp.Neighbourhood_Cleansed = row1.Neighbourhood_Cleansed;
							carga_ods_airbnb_tmp.Neighbourhood_Group_Cleansed = row1.Neighbourhood_Group_Cleansed;
							carga_ods_airbnb_tmp.Zipcode = row1.Zipcode;
							carga_ods_airbnb_tmp.Market = row1.Market;
							carga_ods_airbnb_tmp.Latitude = row1.Latitude;
							carga_ods_airbnb_tmp.Longitude = row1.Longitude;
							carga_ods_airbnb_tmp.Property_Type = row1.Property_Type;
							carga_ods_airbnb_tmp.Room_Type = row1.Room_Type;
							carga_ods_airbnb_tmp.Accommodates = row1.Accommodates;
							carga_ods_airbnb_tmp.Bathrooms = row1.Bathrooms;
							carga_ods_airbnb_tmp.Bedrooms = row1.Bedrooms;
							carga_ods_airbnb_tmp.beds = row1.Beds;
							carga_ods_airbnb_tmp.Price = row1.Price;
							carga_ods_airbnb_tmp.Weekly_Price = row1.Weekly_Price;
							carga_ods_airbnb_tmp.Monthly_Price = row1.Monthly_Price;
							carga_ods_airbnb_tmp.Guests_Included = row1.Guests_Included;
							carga_ods_airbnb_tmp.Extra_People = row1.Extra_People;
							carga_ods_airbnb_tmp.Minimum_Nights = row1.Minimum_Nights;
							carga_ods_airbnb_tmp.Maximum_Nights = row1.Maximum_Nights;
							carga_ods_airbnb_tmp.Number_of_Reviews = row1.Number_of_Reviews;
							carga_ods_airbnb_tmp.Review_Scores_Rating = row1.Review_Scores_Rating;
							carga_ods_airbnb_tmp.Review_Scores_Accuracy = row1.Review_Scores_Accuracy;
							carga_ods_airbnb_tmp.Review_Scores_Cleanliness = row1.Review_Scores_Cleanliness;
							carga_ods_airbnb_tmp.Review_Scores_Checkin = row1.Review_Scores_Checkin;
							carga_ods_airbnb_tmp.Review_Scores_Communication = row1.Review_Scores_Communication;
							carga_ods_airbnb_tmp.Review_Scores_Location = row1.Review_Scores_Location;
							carga_ods_airbnb_tmp.Review_Scores_Value = row1.Review_Scores_Value;
							carga_ods_airbnb_tmp.Cancellation_Policy = row1.Cancellation_Policy;
							carga_ods_airbnb_tmp.Reviews_per_Month = row1.Reviews_per_Month;
							carga_ods_airbnb_tmp.Geolocation = row1.Geolocation;
							carga_ods_airbnb_tmp.Features = row1.Features;
							carga_ods_airbnb = carga_ods_airbnb_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "carga_ods_airbnb"
						if (carga_ods_airbnb != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "carga_ods_airbnb"

								);
							}

							whetherReject_tDBOutput_1 = false;
							int updateFlag_tDBOutput_1 = 0;
							if (carga_ods_airbnb.Host_ID == null) {
								pstmtUpdate_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(1, carga_ods_airbnb.Host_ID);
							}

							if (carga_ods_airbnb.Host_Response_Rate == null) {
								pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(2, carga_ods_airbnb.Host_Response_Rate);
							}

							if (carga_ods_airbnb.Host_Listings_Count == null) {
								pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(3, carga_ods_airbnb.Host_Listings_Count);
							}

							if (carga_ods_airbnb.Host_Total_Listings_Count == null) {
								pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(4, carga_ods_airbnb.Host_Total_Listings_Count);
							}

							if (carga_ods_airbnb.Neighbourhood_Cleansed == null) {
								pstmtUpdate_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(5, carga_ods_airbnb.Neighbourhood_Cleansed);
							}

							if (carga_ods_airbnb.Neighbourhood_Group_Cleansed == null) {
								pstmtUpdate_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(6, carga_ods_airbnb.Neighbourhood_Group_Cleansed);
							}

							if (carga_ods_airbnb.Zipcode == null) {
								pstmtUpdate_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(7, carga_ods_airbnb.Zipcode);
							}

							if (carga_ods_airbnb.Market == null) {
								pstmtUpdate_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(8, carga_ods_airbnb.Market);
							}

							if (carga_ods_airbnb.Latitude == null) {
								pstmtUpdate_tDBOutput_1.setNull(9, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(9, carga_ods_airbnb.Latitude);
							}

							if (carga_ods_airbnb.Longitude == null) {
								pstmtUpdate_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(10, carga_ods_airbnb.Longitude);
							}

							if (carga_ods_airbnb.Property_Type == null) {
								pstmtUpdate_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(11, carga_ods_airbnb.Property_Type);
							}

							if (carga_ods_airbnb.Room_Type == null) {
								pstmtUpdate_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(12, carga_ods_airbnb.Room_Type);
							}

							if (carga_ods_airbnb.Accommodates == null) {
								pstmtUpdate_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(13, carga_ods_airbnb.Accommodates);
							}

							if (carga_ods_airbnb.Bathrooms == null) {
								pstmtUpdate_tDBOutput_1.setNull(14, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(14, carga_ods_airbnb.Bathrooms);
							}

							if (carga_ods_airbnb.Bedrooms == null) {
								pstmtUpdate_tDBOutput_1.setNull(15, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(15, carga_ods_airbnb.Bedrooms);
							}

							if (carga_ods_airbnb.beds == null) {
								pstmtUpdate_tDBOutput_1.setNull(16, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(16, carga_ods_airbnb.beds);
							}

							if (carga_ods_airbnb.Price == null) {
								pstmtUpdate_tDBOutput_1.setNull(17, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(17, carga_ods_airbnb.Price);
							}

							if (carga_ods_airbnb.Weekly_Price == null) {
								pstmtUpdate_tDBOutput_1.setNull(18, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(18, carga_ods_airbnb.Weekly_Price);
							}

							if (carga_ods_airbnb.Monthly_Price == null) {
								pstmtUpdate_tDBOutput_1.setNull(19, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(19, carga_ods_airbnb.Monthly_Price);
							}

							if (carga_ods_airbnb.Guests_Included == null) {
								pstmtUpdate_tDBOutput_1.setNull(20, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(20, carga_ods_airbnb.Guests_Included);
							}

							if (carga_ods_airbnb.Extra_People == null) {
								pstmtUpdate_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(21, carga_ods_airbnb.Extra_People);
							}

							if (carga_ods_airbnb.Minimum_Nights == null) {
								pstmtUpdate_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(22, carga_ods_airbnb.Minimum_Nights);
							}

							if (carga_ods_airbnb.Maximum_Nights == null) {
								pstmtUpdate_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(23, carga_ods_airbnb.Maximum_Nights);
							}

							if (carga_ods_airbnb.Number_of_Reviews == null) {
								pstmtUpdate_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(24, carga_ods_airbnb.Number_of_Reviews);
							}

							if (carga_ods_airbnb.Review_Scores_Rating == null) {
								pstmtUpdate_tDBOutput_1.setNull(25, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(25, carga_ods_airbnb.Review_Scores_Rating);
							}

							if (carga_ods_airbnb.Review_Scores_Accuracy == null) {
								pstmtUpdate_tDBOutput_1.setNull(26, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(26, carga_ods_airbnb.Review_Scores_Accuracy);
							}

							if (carga_ods_airbnb.Review_Scores_Cleanliness == null) {
								pstmtUpdate_tDBOutput_1.setNull(27, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(27, carga_ods_airbnb.Review_Scores_Cleanliness);
							}

							if (carga_ods_airbnb.Review_Scores_Checkin == null) {
								pstmtUpdate_tDBOutput_1.setNull(28, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(28, carga_ods_airbnb.Review_Scores_Checkin);
							}

							if (carga_ods_airbnb.Review_Scores_Communication == null) {
								pstmtUpdate_tDBOutput_1.setNull(29, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(29, carga_ods_airbnb.Review_Scores_Communication);
							}

							if (carga_ods_airbnb.Review_Scores_Location == null) {
								pstmtUpdate_tDBOutput_1.setNull(30, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(30, carga_ods_airbnb.Review_Scores_Location);
							}

							if (carga_ods_airbnb.Review_Scores_Value == null) {
								pstmtUpdate_tDBOutput_1.setNull(31, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(31, carga_ods_airbnb.Review_Scores_Value);
							}

							if (carga_ods_airbnb.Cancellation_Policy == null) {
								pstmtUpdate_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(32, carga_ods_airbnb.Cancellation_Policy);
							}

							if (carga_ods_airbnb.Reviews_per_Month == null) {
								pstmtUpdate_tDBOutput_1.setNull(33, java.sql.Types.DOUBLE);
							} else {
								pstmtUpdate_tDBOutput_1.setDouble(33, carga_ods_airbnb.Reviews_per_Month);
							}

							if (carga_ods_airbnb.Geolocation == null) {
								pstmtUpdate_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(34, carga_ods_airbnb.Geolocation);
							}

							if (carga_ods_airbnb.Features == null) {
								pstmtUpdate_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_1.setString(35, carga_ods_airbnb.Features);
							}

							if (carga_ods_airbnb.ID == null) {
								pstmtUpdate_tDBOutput_1.setNull(36 + count_tDBOutput_1, java.sql.Types.INTEGER);
							} else {
								pstmtUpdate_tDBOutput_1.setLong(36 + count_tDBOutput_1, carga_ods_airbnb.ID);
							}

							try {

								updateFlag_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
								updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1 + updateFlag_tDBOutput_1;
								rowsToCommitCount_tDBOutput_1 += updateFlag_tDBOutput_1;

								if (updateFlag_tDBOutput_1 == 0) {

									if (carga_ods_airbnb.ID == null) {
										pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(1, carga_ods_airbnb.ID);
									}

									if (carga_ods_airbnb.Host_ID == null) {
										pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(2, carga_ods_airbnb.Host_ID);
									}

									if (carga_ods_airbnb.Host_Response_Rate == null) {
										pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(3, carga_ods_airbnb.Host_Response_Rate);
									}

									if (carga_ods_airbnb.Host_Listings_Count == null) {
										pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(4, carga_ods_airbnb.Host_Listings_Count);
									}

									if (carga_ods_airbnb.Host_Total_Listings_Count == null) {
										pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(5,
												carga_ods_airbnb.Host_Total_Listings_Count);
									}

									if (carga_ods_airbnb.Neighbourhood_Cleansed == null) {
										pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(6, carga_ods_airbnb.Neighbourhood_Cleansed);
									}

									if (carga_ods_airbnb.Neighbourhood_Group_Cleansed == null) {
										pstmtInsert_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(7,
												carga_ods_airbnb.Neighbourhood_Group_Cleansed);
									}

									if (carga_ods_airbnb.Zipcode == null) {
										pstmtInsert_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(8, carga_ods_airbnb.Zipcode);
									}

									if (carga_ods_airbnb.Market == null) {
										pstmtInsert_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(9, carga_ods_airbnb.Market);
									}

									if (carga_ods_airbnb.Latitude == null) {
										pstmtInsert_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(10, carga_ods_airbnb.Latitude);
									}

									if (carga_ods_airbnb.Longitude == null) {
										pstmtInsert_tDBOutput_1.setNull(11, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(11, carga_ods_airbnb.Longitude);
									}

									if (carga_ods_airbnb.Property_Type == null) {
										pstmtInsert_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(12, carga_ods_airbnb.Property_Type);
									}

									if (carga_ods_airbnb.Room_Type == null) {
										pstmtInsert_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(13, carga_ods_airbnb.Room_Type);
									}

									if (carga_ods_airbnb.Accommodates == null) {
										pstmtInsert_tDBOutput_1.setNull(14, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(14, carga_ods_airbnb.Accommodates);
									}

									if (carga_ods_airbnb.Bathrooms == null) {
										pstmtInsert_tDBOutput_1.setNull(15, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(15, carga_ods_airbnb.Bathrooms);
									}

									if (carga_ods_airbnb.Bedrooms == null) {
										pstmtInsert_tDBOutput_1.setNull(16, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(16, carga_ods_airbnb.Bedrooms);
									}

									if (carga_ods_airbnb.beds == null) {
										pstmtInsert_tDBOutput_1.setNull(17, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(17, carga_ods_airbnb.beds);
									}

									if (carga_ods_airbnb.Price == null) {
										pstmtInsert_tDBOutput_1.setNull(18, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(18, carga_ods_airbnb.Price);
									}

									if (carga_ods_airbnb.Weekly_Price == null) {
										pstmtInsert_tDBOutput_1.setNull(19, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(19, carga_ods_airbnb.Weekly_Price);
									}

									if (carga_ods_airbnb.Monthly_Price == null) {
										pstmtInsert_tDBOutput_1.setNull(20, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(20, carga_ods_airbnb.Monthly_Price);
									}

									if (carga_ods_airbnb.Guests_Included == null) {
										pstmtInsert_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(21, carga_ods_airbnb.Guests_Included);
									}

									if (carga_ods_airbnb.Extra_People == null) {
										pstmtInsert_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(22, carga_ods_airbnb.Extra_People);
									}

									if (carga_ods_airbnb.Minimum_Nights == null) {
										pstmtInsert_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(23, carga_ods_airbnb.Minimum_Nights);
									}

									if (carga_ods_airbnb.Maximum_Nights == null) {
										pstmtInsert_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(24, carga_ods_airbnb.Maximum_Nights);
									}

									if (carga_ods_airbnb.Number_of_Reviews == null) {
										pstmtInsert_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
									} else {
										pstmtInsert_tDBOutput_1.setLong(25, carga_ods_airbnb.Number_of_Reviews);
									}

									if (carga_ods_airbnb.Review_Scores_Rating == null) {
										pstmtInsert_tDBOutput_1.setNull(26, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(26, carga_ods_airbnb.Review_Scores_Rating);
									}

									if (carga_ods_airbnb.Review_Scores_Accuracy == null) {
										pstmtInsert_tDBOutput_1.setNull(27, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(27, carga_ods_airbnb.Review_Scores_Accuracy);
									}

									if (carga_ods_airbnb.Review_Scores_Cleanliness == null) {
										pstmtInsert_tDBOutput_1.setNull(28, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(28,
												carga_ods_airbnb.Review_Scores_Cleanliness);
									}

									if (carga_ods_airbnb.Review_Scores_Checkin == null) {
										pstmtInsert_tDBOutput_1.setNull(29, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(29, carga_ods_airbnb.Review_Scores_Checkin);
									}

									if (carga_ods_airbnb.Review_Scores_Communication == null) {
										pstmtInsert_tDBOutput_1.setNull(30, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(30,
												carga_ods_airbnb.Review_Scores_Communication);
									}

									if (carga_ods_airbnb.Review_Scores_Location == null) {
										pstmtInsert_tDBOutput_1.setNull(31, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(31, carga_ods_airbnb.Review_Scores_Location);
									}

									if (carga_ods_airbnb.Review_Scores_Value == null) {
										pstmtInsert_tDBOutput_1.setNull(32, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(32, carga_ods_airbnb.Review_Scores_Value);
									}

									if (carga_ods_airbnb.Cancellation_Policy == null) {
										pstmtInsert_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(33, carga_ods_airbnb.Cancellation_Policy);
									}

									if (carga_ods_airbnb.Reviews_per_Month == null) {
										pstmtInsert_tDBOutput_1.setNull(34, java.sql.Types.DOUBLE);
									} else {
										pstmtInsert_tDBOutput_1.setDouble(34, carga_ods_airbnb.Reviews_per_Month);
									}

									if (carga_ods_airbnb.Geolocation == null) {
										pstmtInsert_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(35, carga_ods_airbnb.Geolocation);
									}

									if (carga_ods_airbnb.Features == null) {
										pstmtInsert_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tDBOutput_1.setString(36, carga_ods_airbnb.Features);
									}

									int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
									insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
									rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
									nb_line_tDBOutput_1++;

								} else {
									nb_line_tDBOutput_1++;

								}
							} catch (java.lang.Exception e) {
								globalMap.put("tDBOutput_1_ERROR_MESSAGE", e.getMessage());

								whetherReject_tDBOutput_1 = true;
								nb_line_tDBOutput_1++;
								System.err.print(e.getMessage());
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "carga_ods_airbnb"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "carga_ods_airbnb");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final jd_ods_data jd_ods_dataClass = new jd_ods_data();

		int exitCode = jd_ods_dataClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = jd_ods_data.class.getClassLoader().getResourceAsStream(
					"almacen_data_womans_company/jd_ods_data_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = jd_ods_data.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : jd_ods_data");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 156759 characters generated by Talend Open Studio for Data Integration on the
 * 15 de febrero de 2023, 8:19:47 CET
 ************************************************************************************************/