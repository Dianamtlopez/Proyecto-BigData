// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_data_womans_company.job_odl_csv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Job_odl_csv Purpose: <br>
 * Description: Job para carga y env√≠o de datos <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Job_odl_csv implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Job_odl_csv";
	private final String projectName = "ETL_DATA_WOMANS_COMPANY";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Job_odl_csv.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Job_odl_csv.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[0];
		static byte[] commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Host_ID;

		public String getHost_ID() {
			return this.Host_ID;
		}

		public String Host_Response_Rate;

		public String getHost_Response_Rate() {
			return this.Host_Response_Rate;
		}

		public String Host_Listings_Count;

		public String getHost_Listings_Count() {
			return this.Host_Listings_Count;
		}

		public String Host_Total_Listings_Count;

		public String getHost_Total_Listings_Count() {
			return this.Host_Total_Listings_Count;
		}

		public String Neighbourhood_Cleansed;

		public String getNeighbourhood_Cleansed() {
			return this.Neighbourhood_Cleansed;
		}

		public String Neighbourhood_Group_Cleansed;

		public String getNeighbourhood_Group_Cleansed() {
			return this.Neighbourhood_Group_Cleansed;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		public String Market;

		public String getMarket() {
			return this.Market;
		}

		public String Latitude;

		public String getLatitude() {
			return this.Latitude;
		}

		public String Longitude;

		public String getLongitude() {
			return this.Longitude;
		}

		public String Property_Type;

		public String getProperty_Type() {
			return this.Property_Type;
		}

		public String Room_Type;

		public String getRoom_Type() {
			return this.Room_Type;
		}

		public String Accommodates;

		public String getAccommodates() {
			return this.Accommodates;
		}

		public String Bathrooms;

		public String getBathrooms() {
			return this.Bathrooms;
		}

		public String Bedrooms;

		public String getBedrooms() {
			return this.Bedrooms;
		}

		public String Beds;

		public String getBeds() {
			return this.Beds;
		}

		public String Price;

		public String getPrice() {
			return this.Price;
		}

		public String Weekly_Price;

		public String getWeekly_Price() {
			return this.Weekly_Price;
		}

		public String Monthly_Price;

		public String getMonthly_Price() {
			return this.Monthly_Price;
		}

		public String Guests_Included;

		public String getGuests_Included() {
			return this.Guests_Included;
		}

		public String Extra_People;

		public String getExtra_People() {
			return this.Extra_People;
		}

		public String Minimum_Nights;

		public String getMinimum_Nights() {
			return this.Minimum_Nights;
		}

		public String Maximum_Nights;

		public String getMaximum_Nights() {
			return this.Maximum_Nights;
		}

		public String Number_of_Reviews;

		public String getNumber_of_Reviews() {
			return this.Number_of_Reviews;
		}

		public String Review_Scores_Rating;

		public String getReview_Scores_Rating() {
			return this.Review_Scores_Rating;
		}

		public String Review_Scores_Accuracy;

		public String getReview_Scores_Accuracy() {
			return this.Review_Scores_Accuracy;
		}

		public String Review_Scores_Cleanliness;

		public String getReview_Scores_Cleanliness() {
			return this.Review_Scores_Cleanliness;
		}

		public String Review_Scores_Checkin;

		public String getReview_Scores_Checkin() {
			return this.Review_Scores_Checkin;
		}

		public String Review_Scores_Communication;

		public String getReview_Scores_Communication() {
			return this.Review_Scores_Communication;
		}

		public String Review_Scores_Location;

		public String getReview_Scores_Location() {
			return this.Review_Scores_Location;
		}

		public String Review_Scores_Value;

		public String getReview_Scores_Value() {
			return this.Review_Scores_Value;
		}

		public String Cancellation_Policy;

		public String getCancellation_Policy() {
			return this.Cancellation_Policy;
		}

		public String Reviews_per_Month;

		public String getReviews_per_Month() {
			return this.Reviews_per_Month;
		}

		public String Geolocation;

		public String getGeolocation() {
			return this.Geolocation;
		}

		public String Features;

		public String getFeatures() {
			return this.Features;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ID = this.ID;
			other.Host_ID = this.Host_ID;
			other.Host_Response_Rate = this.Host_Response_Rate;
			other.Host_Listings_Count = this.Host_Listings_Count;
			other.Host_Total_Listings_Count = this.Host_Total_Listings_Count;
			other.Neighbourhood_Cleansed = this.Neighbourhood_Cleansed;
			other.Neighbourhood_Group_Cleansed = this.Neighbourhood_Group_Cleansed;
			other.Zipcode = this.Zipcode;
			other.Market = this.Market;
			other.Latitude = this.Latitude;
			other.Longitude = this.Longitude;
			other.Property_Type = this.Property_Type;
			other.Room_Type = this.Room_Type;
			other.Accommodates = this.Accommodates;
			other.Bathrooms = this.Bathrooms;
			other.Bedrooms = this.Bedrooms;
			other.Beds = this.Beds;
			other.Price = this.Price;
			other.Weekly_Price = this.Weekly_Price;
			other.Monthly_Price = this.Monthly_Price;
			other.Guests_Included = this.Guests_Included;
			other.Extra_People = this.Extra_People;
			other.Minimum_Nights = this.Minimum_Nights;
			other.Maximum_Nights = this.Maximum_Nights;
			other.Number_of_Reviews = this.Number_of_Reviews;
			other.Review_Scores_Rating = this.Review_Scores_Rating;
			other.Review_Scores_Accuracy = this.Review_Scores_Accuracy;
			other.Review_Scores_Cleanliness = this.Review_Scores_Cleanliness;
			other.Review_Scores_Checkin = this.Review_Scores_Checkin;
			other.Review_Scores_Communication = this.Review_Scores_Communication;
			other.Review_Scores_Location = this.Review_Scores_Location;
			other.Review_Scores_Value = this.Review_Scores_Value;
			other.Cancellation_Policy = this.Cancellation_Policy;
			other.Reviews_per_Month = this.Reviews_per_Month;
			other.Geolocation = this.Geolocation;
			other.Features = this.Features;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length) {
					if (length < 1024 && commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length) {
					if (length < 1024 && commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Host_ID = readString(dis);

					this.Host_Response_Rate = readString(dis);

					this.Host_Listings_Count = readString(dis);

					this.Host_Total_Listings_Count = readString(dis);

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					this.Accommodates = readString(dis);

					this.Bathrooms = readString(dis);

					this.Bedrooms = readString(dis);

					this.Beds = readString(dis);

					this.Price = readString(dis);

					this.Weekly_Price = readString(dis);

					this.Monthly_Price = readString(dis);

					this.Guests_Included = readString(dis);

					this.Extra_People = readString(dis);

					this.Minimum_Nights = readString(dis);

					this.Maximum_Nights = readString(dis);

					this.Number_of_Reviews = readString(dis);

					this.Review_Scores_Rating = readString(dis);

					this.Review_Scores_Accuracy = readString(dis);

					this.Review_Scores_Cleanliness = readString(dis);

					this.Review_Scores_Checkin = readString(dis);

					this.Review_Scores_Communication = readString(dis);

					this.Review_Scores_Location = readString(dis);

					this.Review_Scores_Value = readString(dis);

					this.Cancellation_Policy = readString(dis);

					this.Reviews_per_Month = readString(dis);

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Host_ID = readString(dis);

					this.Host_Response_Rate = readString(dis);

					this.Host_Listings_Count = readString(dis);

					this.Host_Total_Listings_Count = readString(dis);

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					this.Accommodates = readString(dis);

					this.Bathrooms = readString(dis);

					this.Bedrooms = readString(dis);

					this.Beds = readString(dis);

					this.Price = readString(dis);

					this.Weekly_Price = readString(dis);

					this.Monthly_Price = readString(dis);

					this.Guests_Included = readString(dis);

					this.Extra_People = readString(dis);

					this.Minimum_Nights = readString(dis);

					this.Maximum_Nights = readString(dis);

					this.Number_of_Reviews = readString(dis);

					this.Review_Scores_Rating = readString(dis);

					this.Review_Scores_Accuracy = readString(dis);

					this.Review_Scores_Cleanliness = readString(dis);

					this.Review_Scores_Checkin = readString(dis);

					this.Review_Scores_Communication = readString(dis);

					this.Review_Scores_Location = readString(dis);

					this.Review_Scores_Value = readString(dis);

					this.Cancellation_Policy = readString(dis);

					this.Reviews_per_Month = readString(dis);

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Host_ID, dos);

				// String

				writeString(this.Host_Response_Rate, dos);

				// String

				writeString(this.Host_Listings_Count, dos);

				// String

				writeString(this.Host_Total_Listings_Count, dos);

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// String

				writeString(this.Accommodates, dos);

				// String

				writeString(this.Bathrooms, dos);

				// String

				writeString(this.Bedrooms, dos);

				// String

				writeString(this.Beds, dos);

				// String

				writeString(this.Price, dos);

				// String

				writeString(this.Weekly_Price, dos);

				// String

				writeString(this.Monthly_Price, dos);

				// String

				writeString(this.Guests_Included, dos);

				// String

				writeString(this.Extra_People, dos);

				// String

				writeString(this.Minimum_Nights, dos);

				// String

				writeString(this.Maximum_Nights, dos);

				// String

				writeString(this.Number_of_Reviews, dos);

				// String

				writeString(this.Review_Scores_Rating, dos);

				// String

				writeString(this.Review_Scores_Accuracy, dos);

				// String

				writeString(this.Review_Scores_Cleanliness, dos);

				// String

				writeString(this.Review_Scores_Checkin, dos);

				// String

				writeString(this.Review_Scores_Communication, dos);

				// String

				writeString(this.Review_Scores_Location, dos);

				// String

				writeString(this.Review_Scores_Value, dos);

				// String

				writeString(this.Cancellation_Policy, dos);

				// String

				writeString(this.Reviews_per_Month, dos);

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Host_ID, dos);

				// String

				writeString(this.Host_Response_Rate, dos);

				// String

				writeString(this.Host_Listings_Count, dos);

				// String

				writeString(this.Host_Total_Listings_Count, dos);

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// String

				writeString(this.Accommodates, dos);

				// String

				writeString(this.Bathrooms, dos);

				// String

				writeString(this.Bedrooms, dos);

				// String

				writeString(this.Beds, dos);

				// String

				writeString(this.Price, dos);

				// String

				writeString(this.Weekly_Price, dos);

				// String

				writeString(this.Monthly_Price, dos);

				// String

				writeString(this.Guests_Included, dos);

				// String

				writeString(this.Extra_People, dos);

				// String

				writeString(this.Minimum_Nights, dos);

				// String

				writeString(this.Maximum_Nights, dos);

				// String

				writeString(this.Number_of_Reviews, dos);

				// String

				writeString(this.Review_Scores_Rating, dos);

				// String

				writeString(this.Review_Scores_Accuracy, dos);

				// String

				writeString(this.Review_Scores_Cleanliness, dos);

				// String

				writeString(this.Review_Scores_Checkin, dos);

				// String

				writeString(this.Review_Scores_Communication, dos);

				// String

				writeString(this.Review_Scores_Location, dos);

				// String

				writeString(this.Review_Scores_Value, dos);

				// String

				writeString(this.Cancellation_Policy, dos);

				// String

				writeString(this.Reviews_per_Month, dos);

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Host_ID=" + Host_ID);
			sb.append(",Host_Response_Rate=" + Host_Response_Rate);
			sb.append(",Host_Listings_Count=" + Host_Listings_Count);
			sb.append(",Host_Total_Listings_Count=" + Host_Total_Listings_Count);
			sb.append(",Neighbourhood_Cleansed=" + Neighbourhood_Cleansed);
			sb.append(",Neighbourhood_Group_Cleansed=" + Neighbourhood_Group_Cleansed);
			sb.append(",Zipcode=" + Zipcode);
			sb.append(",Market=" + Market);
			sb.append(",Latitude=" + Latitude);
			sb.append(",Longitude=" + Longitude);
			sb.append(",Property_Type=" + Property_Type);
			sb.append(",Room_Type=" + Room_Type);
			sb.append(",Accommodates=" + Accommodates);
			sb.append(",Bathrooms=" + Bathrooms);
			sb.append(",Bedrooms=" + Bedrooms);
			sb.append(",Beds=" + Beds);
			sb.append(",Price=" + Price);
			sb.append(",Weekly_Price=" + Weekly_Price);
			sb.append(",Monthly_Price=" + Monthly_Price);
			sb.append(",Guests_Included=" + Guests_Included);
			sb.append(",Extra_People=" + Extra_People);
			sb.append(",Minimum_Nights=" + Minimum_Nights);
			sb.append(",Maximum_Nights=" + Maximum_Nights);
			sb.append(",Number_of_Reviews=" + Number_of_Reviews);
			sb.append(",Review_Scores_Rating=" + Review_Scores_Rating);
			sb.append(",Review_Scores_Accuracy=" + Review_Scores_Accuracy);
			sb.append(",Review_Scores_Cleanliness=" + Review_Scores_Cleanliness);
			sb.append(",Review_Scores_Checkin=" + Review_Scores_Checkin);
			sb.append(",Review_Scores_Communication=" + Review_Scores_Communication);
			sb.append(",Review_Scores_Location=" + Review_Scores_Location);
			sb.append(",Review_Scores_Value=" + Review_Scores_Value);
			sb.append(",Cancellation_Policy=" + Cancellation_Policy);
			sb.append(",Reviews_per_Month=" + Reviews_per_Month);
			sb.append(",Geolocation=" + Geolocation);
			sb.append(",Features=" + Features);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[0];
		static byte[] commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Host_ID;

		public String getHost_ID() {
			return this.Host_ID;
		}

		public String Host_Response_Rate;

		public String getHost_Response_Rate() {
			return this.Host_Response_Rate;
		}

		public String Host_Listings_Count;

		public String getHost_Listings_Count() {
			return this.Host_Listings_Count;
		}

		public String Host_Total_Listings_Count;

		public String getHost_Total_Listings_Count() {
			return this.Host_Total_Listings_Count;
		}

		public String Neighbourhood_Cleansed;

		public String getNeighbourhood_Cleansed() {
			return this.Neighbourhood_Cleansed;
		}

		public String Neighbourhood_Group_Cleansed;

		public String getNeighbourhood_Group_Cleansed() {
			return this.Neighbourhood_Group_Cleansed;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		public String Market;

		public String getMarket() {
			return this.Market;
		}

		public String Latitude;

		public String getLatitude() {
			return this.Latitude;
		}

		public String Longitude;

		public String getLongitude() {
			return this.Longitude;
		}

		public String Property_Type;

		public String getProperty_Type() {
			return this.Property_Type;
		}

		public String Room_Type;

		public String getRoom_Type() {
			return this.Room_Type;
		}

		public String Accommodates;

		public String getAccommodates() {
			return this.Accommodates;
		}

		public String Bathrooms;

		public String getBathrooms() {
			return this.Bathrooms;
		}

		public String Bedrooms;

		public String getBedrooms() {
			return this.Bedrooms;
		}

		public String Beds;

		public String getBeds() {
			return this.Beds;
		}

		public String Price;

		public String getPrice() {
			return this.Price;
		}

		public String Weekly_Price;

		public String getWeekly_Price() {
			return this.Weekly_Price;
		}

		public String Monthly_Price;

		public String getMonthly_Price() {
			return this.Monthly_Price;
		}

		public String Guests_Included;

		public String getGuests_Included() {
			return this.Guests_Included;
		}

		public String Extra_People;

		public String getExtra_People() {
			return this.Extra_People;
		}

		public String Minimum_Nights;

		public String getMinimum_Nights() {
			return this.Minimum_Nights;
		}

		public String Maximum_Nights;

		public String getMaximum_Nights() {
			return this.Maximum_Nights;
		}

		public String Number_of_Reviews;

		public String getNumber_of_Reviews() {
			return this.Number_of_Reviews;
		}

		public String Review_Scores_Rating;

		public String getReview_Scores_Rating() {
			return this.Review_Scores_Rating;
		}

		public String Review_Scores_Accuracy;

		public String getReview_Scores_Accuracy() {
			return this.Review_Scores_Accuracy;
		}

		public String Review_Scores_Cleanliness;

		public String getReview_Scores_Cleanliness() {
			return this.Review_Scores_Cleanliness;
		}

		public String Review_Scores_Checkin;

		public String getReview_Scores_Checkin() {
			return this.Review_Scores_Checkin;
		}

		public String Review_Scores_Communication;

		public String getReview_Scores_Communication() {
			return this.Review_Scores_Communication;
		}

		public String Review_Scores_Location;

		public String getReview_Scores_Location() {
			return this.Review_Scores_Location;
		}

		public String Review_Scores_Value;

		public String getReview_Scores_Value() {
			return this.Review_Scores_Value;
		}

		public String Cancellation_Policy;

		public String getCancellation_Policy() {
			return this.Cancellation_Policy;
		}

		public String Reviews_per_Month;

		public String getReviews_per_Month() {
			return this.Reviews_per_Month;
		}

		public String Geolocation;

		public String getGeolocation() {
			return this.Geolocation;
		}

		public String Features;

		public String getFeatures() {
			return this.Features;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID = this.ID;
			other.Host_ID = this.Host_ID;
			other.Host_Response_Rate = this.Host_Response_Rate;
			other.Host_Listings_Count = this.Host_Listings_Count;
			other.Host_Total_Listings_Count = this.Host_Total_Listings_Count;
			other.Neighbourhood_Cleansed = this.Neighbourhood_Cleansed;
			other.Neighbourhood_Group_Cleansed = this.Neighbourhood_Group_Cleansed;
			other.Zipcode = this.Zipcode;
			other.Market = this.Market;
			other.Latitude = this.Latitude;
			other.Longitude = this.Longitude;
			other.Property_Type = this.Property_Type;
			other.Room_Type = this.Room_Type;
			other.Accommodates = this.Accommodates;
			other.Bathrooms = this.Bathrooms;
			other.Bedrooms = this.Bedrooms;
			other.Beds = this.Beds;
			other.Price = this.Price;
			other.Weekly_Price = this.Weekly_Price;
			other.Monthly_Price = this.Monthly_Price;
			other.Guests_Included = this.Guests_Included;
			other.Extra_People = this.Extra_People;
			other.Minimum_Nights = this.Minimum_Nights;
			other.Maximum_Nights = this.Maximum_Nights;
			other.Number_of_Reviews = this.Number_of_Reviews;
			other.Review_Scores_Rating = this.Review_Scores_Rating;
			other.Review_Scores_Accuracy = this.Review_Scores_Accuracy;
			other.Review_Scores_Cleanliness = this.Review_Scores_Cleanliness;
			other.Review_Scores_Checkin = this.Review_Scores_Checkin;
			other.Review_Scores_Communication = this.Review_Scores_Communication;
			other.Review_Scores_Location = this.Review_Scores_Location;
			other.Review_Scores_Value = this.Review_Scores_Value;
			other.Cancellation_Policy = this.Cancellation_Policy;
			other.Reviews_per_Month = this.Reviews_per_Month;
			other.Geolocation = this.Geolocation;
			other.Features = this.Features;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length) {
					if (length < 1024 && commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length) {
					if (length < 1024 && commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Host_ID = readString(dis);

					this.Host_Response_Rate = readString(dis);

					this.Host_Listings_Count = readString(dis);

					this.Host_Total_Listings_Count = readString(dis);

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					this.Accommodates = readString(dis);

					this.Bathrooms = readString(dis);

					this.Bedrooms = readString(dis);

					this.Beds = readString(dis);

					this.Price = readString(dis);

					this.Weekly_Price = readString(dis);

					this.Monthly_Price = readString(dis);

					this.Guests_Included = readString(dis);

					this.Extra_People = readString(dis);

					this.Minimum_Nights = readString(dis);

					this.Maximum_Nights = readString(dis);

					this.Number_of_Reviews = readString(dis);

					this.Review_Scores_Rating = readString(dis);

					this.Review_Scores_Accuracy = readString(dis);

					this.Review_Scores_Cleanliness = readString(dis);

					this.Review_Scores_Checkin = readString(dis);

					this.Review_Scores_Communication = readString(dis);

					this.Review_Scores_Location = readString(dis);

					this.Review_Scores_Value = readString(dis);

					this.Cancellation_Policy = readString(dis);

					this.Reviews_per_Month = readString(dis);

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Host_ID = readString(dis);

					this.Host_Response_Rate = readString(dis);

					this.Host_Listings_Count = readString(dis);

					this.Host_Total_Listings_Count = readString(dis);

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					this.Accommodates = readString(dis);

					this.Bathrooms = readString(dis);

					this.Bedrooms = readString(dis);

					this.Beds = readString(dis);

					this.Price = readString(dis);

					this.Weekly_Price = readString(dis);

					this.Monthly_Price = readString(dis);

					this.Guests_Included = readString(dis);

					this.Extra_People = readString(dis);

					this.Minimum_Nights = readString(dis);

					this.Maximum_Nights = readString(dis);

					this.Number_of_Reviews = readString(dis);

					this.Review_Scores_Rating = readString(dis);

					this.Review_Scores_Accuracy = readString(dis);

					this.Review_Scores_Cleanliness = readString(dis);

					this.Review_Scores_Checkin = readString(dis);

					this.Review_Scores_Communication = readString(dis);

					this.Review_Scores_Location = readString(dis);

					this.Review_Scores_Value = readString(dis);

					this.Cancellation_Policy = readString(dis);

					this.Reviews_per_Month = readString(dis);

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Host_ID, dos);

				// String

				writeString(this.Host_Response_Rate, dos);

				// String

				writeString(this.Host_Listings_Count, dos);

				// String

				writeString(this.Host_Total_Listings_Count, dos);

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// String

				writeString(this.Accommodates, dos);

				// String

				writeString(this.Bathrooms, dos);

				// String

				writeString(this.Bedrooms, dos);

				// String

				writeString(this.Beds, dos);

				// String

				writeString(this.Price, dos);

				// String

				writeString(this.Weekly_Price, dos);

				// String

				writeString(this.Monthly_Price, dos);

				// String

				writeString(this.Guests_Included, dos);

				// String

				writeString(this.Extra_People, dos);

				// String

				writeString(this.Minimum_Nights, dos);

				// String

				writeString(this.Maximum_Nights, dos);

				// String

				writeString(this.Number_of_Reviews, dos);

				// String

				writeString(this.Review_Scores_Rating, dos);

				// String

				writeString(this.Review_Scores_Accuracy, dos);

				// String

				writeString(this.Review_Scores_Cleanliness, dos);

				// String

				writeString(this.Review_Scores_Checkin, dos);

				// String

				writeString(this.Review_Scores_Communication, dos);

				// String

				writeString(this.Review_Scores_Location, dos);

				// String

				writeString(this.Review_Scores_Value, dos);

				// String

				writeString(this.Cancellation_Policy, dos);

				// String

				writeString(this.Reviews_per_Month, dos);

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Host_ID, dos);

				// String

				writeString(this.Host_Response_Rate, dos);

				// String

				writeString(this.Host_Listings_Count, dos);

				// String

				writeString(this.Host_Total_Listings_Count, dos);

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// String

				writeString(this.Accommodates, dos);

				// String

				writeString(this.Bathrooms, dos);

				// String

				writeString(this.Bedrooms, dos);

				// String

				writeString(this.Beds, dos);

				// String

				writeString(this.Price, dos);

				// String

				writeString(this.Weekly_Price, dos);

				// String

				writeString(this.Monthly_Price, dos);

				// String

				writeString(this.Guests_Included, dos);

				// String

				writeString(this.Extra_People, dos);

				// String

				writeString(this.Minimum_Nights, dos);

				// String

				writeString(this.Maximum_Nights, dos);

				// String

				writeString(this.Number_of_Reviews, dos);

				// String

				writeString(this.Review_Scores_Rating, dos);

				// String

				writeString(this.Review_Scores_Accuracy, dos);

				// String

				writeString(this.Review_Scores_Cleanliness, dos);

				// String

				writeString(this.Review_Scores_Checkin, dos);

				// String

				writeString(this.Review_Scores_Communication, dos);

				// String

				writeString(this.Review_Scores_Location, dos);

				// String

				writeString(this.Review_Scores_Value, dos);

				// String

				writeString(this.Cancellation_Policy, dos);

				// String

				writeString(this.Reviews_per_Month, dos);

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Host_ID=" + Host_ID);
			sb.append(",Host_Response_Rate=" + Host_Response_Rate);
			sb.append(",Host_Listings_Count=" + Host_Listings_Count);
			sb.append(",Host_Total_Listings_Count=" + Host_Total_Listings_Count);
			sb.append(",Neighbourhood_Cleansed=" + Neighbourhood_Cleansed);
			sb.append(",Neighbourhood_Group_Cleansed=" + Neighbourhood_Group_Cleansed);
			sb.append(",Zipcode=" + Zipcode);
			sb.append(",Market=" + Market);
			sb.append(",Latitude=" + Latitude);
			sb.append(",Longitude=" + Longitude);
			sb.append(",Property_Type=" + Property_Type);
			sb.append(",Room_Type=" + Room_Type);
			sb.append(",Accommodates=" + Accommodates);
			sb.append(",Bathrooms=" + Bathrooms);
			sb.append(",Bedrooms=" + Bedrooms);
			sb.append(",Beds=" + Beds);
			sb.append(",Price=" + Price);
			sb.append(",Weekly_Price=" + Weekly_Price);
			sb.append(",Monthly_Price=" + Monthly_Price);
			sb.append(",Guests_Included=" + Guests_Included);
			sb.append(",Extra_People=" + Extra_People);
			sb.append(",Minimum_Nights=" + Minimum_Nights);
			sb.append(",Maximum_Nights=" + Maximum_Nights);
			sb.append(",Number_of_Reviews=" + Number_of_Reviews);
			sb.append(",Review_Scores_Rating=" + Review_Scores_Rating);
			sb.append(",Review_Scores_Accuracy=" + Review_Scores_Accuracy);
			sb.append(",Review_Scores_Cleanliness=" + Review_Scores_Cleanliness);
			sb.append(",Review_Scores_Checkin=" + Review_Scores_Checkin);
			sb.append(",Review_Scores_Communication=" + Review_Scores_Communication);
			sb.append(",Review_Scores_Location=" + Review_Scores_Location);
			sb.append(",Review_Scores_Value=" + Review_Scores_Value);
			sb.append(",Cancellation_Policy=" + Cancellation_Policy);
			sb.append(",Reviews_per_Month=" + Reviews_per_Month);
			sb.append(",Geolocation=" + Geolocation);
			sb.append(",Features=" + Features);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[0];
		static byte[] commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public String Listing_Url;

		public String getListing_Url() {
			return this.Listing_Url;
		}

		public String Scrape_ID;

		public String getScrape_ID() {
			return this.Scrape_ID;
		}

		public String Last_Scraped;

		public String getLast_Scraped() {
			return this.Last_Scraped;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Summary;

		public String getSummary() {
			return this.Summary;
		}

		public String Space;

		public String getSpace() {
			return this.Space;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String Experiences_Offered;

		public String getExperiences_Offered() {
			return this.Experiences_Offered;
		}

		public String Neighborhood_Overview;

		public String getNeighborhood_Overview() {
			return this.Neighborhood_Overview;
		}

		public String Notes;

		public String getNotes() {
			return this.Notes;
		}

		public String Transit;

		public String getTransit() {
			return this.Transit;
		}

		public String Access;

		public String getAccess() {
			return this.Access;
		}

		public String Interaction;

		public String getInteraction() {
			return this.Interaction;
		}

		public String House_Rules;

		public String getHouse_Rules() {
			return this.House_Rules;
		}

		public String Thumbnail_Url;

		public String getThumbnail_Url() {
			return this.Thumbnail_Url;
		}

		public String Medium_Url;

		public String getMedium_Url() {
			return this.Medium_Url;
		}

		public String Picture_Url;

		public String getPicture_Url() {
			return this.Picture_Url;
		}

		public String XL_Picture_Url;

		public String getXL_Picture_Url() {
			return this.XL_Picture_Url;
		}

		public String Host_ID;

		public String getHost_ID() {
			return this.Host_ID;
		}

		public String Host_URL;

		public String getHost_URL() {
			return this.Host_URL;
		}

		public String Host_Name;

		public String getHost_Name() {
			return this.Host_Name;
		}

		public String Host_Since;

		public String getHost_Since() {
			return this.Host_Since;
		}

		public String Host_Location;

		public String getHost_Location() {
			return this.Host_Location;
		}

		public String Host_About;

		public String getHost_About() {
			return this.Host_About;
		}

		public String Host_Response_Time;

		public String getHost_Response_Time() {
			return this.Host_Response_Time;
		}

		public String Host_Response_Rate;

		public String getHost_Response_Rate() {
			return this.Host_Response_Rate;
		}

		public String Host_Acceptance_Rate;

		public String getHost_Acceptance_Rate() {
			return this.Host_Acceptance_Rate;
		}

		public String Host_Thumbnail_Url;

		public String getHost_Thumbnail_Url() {
			return this.Host_Thumbnail_Url;
		}

		public String Host_Picture_Url;

		public String getHost_Picture_Url() {
			return this.Host_Picture_Url;
		}

		public String Host_Neighbourhood;

		public String getHost_Neighbourhood() {
			return this.Host_Neighbourhood;
		}

		public String Host_Listings_Count;

		public String getHost_Listings_Count() {
			return this.Host_Listings_Count;
		}

		public String Host_Total_Listings_Count;

		public String getHost_Total_Listings_Count() {
			return this.Host_Total_Listings_Count;
		}

		public String Host_Verifications;

		public String getHost_Verifications() {
			return this.Host_Verifications;
		}

		public String Street;

		public String getStreet() {
			return this.Street;
		}

		public String Neighbourhood;

		public String getNeighbourhood() {
			return this.Neighbourhood;
		}

		public String Neighbourhood_Cleansed;

		public String getNeighbourhood_Cleansed() {
			return this.Neighbourhood_Cleansed;
		}

		public String Neighbourhood_Group_Cleansed;

		public String getNeighbourhood_Group_Cleansed() {
			return this.Neighbourhood_Group_Cleansed;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		public String State;

		public String getState() {
			return this.State;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		public String Market;

		public String getMarket() {
			return this.Market;
		}

		public String Smart_Location;

		public String getSmart_Location() {
			return this.Smart_Location;
		}

		public String Country_Code;

		public String getCountry_Code() {
			return this.Country_Code;
		}

		public String Country;

		public String getCountry() {
			return this.Country;
		}

		public String Latitude;

		public String getLatitude() {
			return this.Latitude;
		}

		public String Longitude;

		public String getLongitude() {
			return this.Longitude;
		}

		public String Property_Type;

		public String getProperty_Type() {
			return this.Property_Type;
		}

		public String Room_Type;

		public String getRoom_Type() {
			return this.Room_Type;
		}

		public String Accommodates;

		public String getAccommodates() {
			return this.Accommodates;
		}

		public String Bathrooms;

		public String getBathrooms() {
			return this.Bathrooms;
		}

		public String Bedrooms;

		public String getBedrooms() {
			return this.Bedrooms;
		}

		public String Beds;

		public String getBeds() {
			return this.Beds;
		}

		public String Bed_Type;

		public String getBed_Type() {
			return this.Bed_Type;
		}

		public String Amenities;

		public String getAmenities() {
			return this.Amenities;
		}

		public String Square_Feet;

		public String getSquare_Feet() {
			return this.Square_Feet;
		}

		public String Price;

		public String getPrice() {
			return this.Price;
		}

		public String Weekly_Price;

		public String getWeekly_Price() {
			return this.Weekly_Price;
		}

		public String Monthly_Price;

		public String getMonthly_Price() {
			return this.Monthly_Price;
		}

		public String Security_Deposit;

		public String getSecurity_Deposit() {
			return this.Security_Deposit;
		}

		public String Cleaning_Fee;

		public String getCleaning_Fee() {
			return this.Cleaning_Fee;
		}

		public String Guests_Included;

		public String getGuests_Included() {
			return this.Guests_Included;
		}

		public String Extra_People;

		public String getExtra_People() {
			return this.Extra_People;
		}

		public String Minimum_Nights;

		public String getMinimum_Nights() {
			return this.Minimum_Nights;
		}

		public String Maximum_Nights;

		public String getMaximum_Nights() {
			return this.Maximum_Nights;
		}

		public String Calendar_Updated;

		public String getCalendar_Updated() {
			return this.Calendar_Updated;
		}

		public String Has_Availability;

		public String getHas_Availability() {
			return this.Has_Availability;
		}

		public String Availability_30;

		public String getAvailability_30() {
			return this.Availability_30;
		}

		public String Availability_60;

		public String getAvailability_60() {
			return this.Availability_60;
		}

		public String Availability_90;

		public String getAvailability_90() {
			return this.Availability_90;
		}

		public String Availability_365;

		public String getAvailability_365() {
			return this.Availability_365;
		}

		public String Calendar_last_Scraped;

		public String getCalendar_last_Scraped() {
			return this.Calendar_last_Scraped;
		}

		public String Number_of_Reviews;

		public String getNumber_of_Reviews() {
			return this.Number_of_Reviews;
		}

		public String First_Review;

		public String getFirst_Review() {
			return this.First_Review;
		}

		public String Last_Review;

		public String getLast_Review() {
			return this.Last_Review;
		}

		public String Review_Scores_Rating;

		public String getReview_Scores_Rating() {
			return this.Review_Scores_Rating;
		}

		public String Review_Scores_Accuracy;

		public String getReview_Scores_Accuracy() {
			return this.Review_Scores_Accuracy;
		}

		public String Review_Scores_Cleanliness;

		public String getReview_Scores_Cleanliness() {
			return this.Review_Scores_Cleanliness;
		}

		public String Review_Scores_Checkin;

		public String getReview_Scores_Checkin() {
			return this.Review_Scores_Checkin;
		}

		public String Review_Scores_Communication;

		public String getReview_Scores_Communication() {
			return this.Review_Scores_Communication;
		}

		public String Review_Scores_Location;

		public String getReview_Scores_Location() {
			return this.Review_Scores_Location;
		}

		public String Review_Scores_Value;

		public String getReview_Scores_Value() {
			return this.Review_Scores_Value;
		}

		public String License;

		public String getLicense() {
			return this.License;
		}

		public String Jurisdiction_Names;

		public String getJurisdiction_Names() {
			return this.Jurisdiction_Names;
		}

		public String Cancellation_Policy;

		public String getCancellation_Policy() {
			return this.Cancellation_Policy;
		}

		public String Calculated_host_listings_count;

		public String getCalculated_host_listings_count() {
			return this.Calculated_host_listings_count;
		}

		public String Reviews_per_Month;

		public String getReviews_per_Month() {
			return this.Reviews_per_Month;
		}

		public String Geolocation;

		public String getGeolocation() {
			return this.Geolocation;
		}

		public String Features;

		public String getFeatures() {
			return this.Features;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ID = this.ID;
			other.Listing_Url = this.Listing_Url;
			other.Scrape_ID = this.Scrape_ID;
			other.Last_Scraped = this.Last_Scraped;
			other.Name = this.Name;
			other.Summary = this.Summary;
			other.Space = this.Space;
			other.Description = this.Description;
			other.Experiences_Offered = this.Experiences_Offered;
			other.Neighborhood_Overview = this.Neighborhood_Overview;
			other.Notes = this.Notes;
			other.Transit = this.Transit;
			other.Access = this.Access;
			other.Interaction = this.Interaction;
			other.House_Rules = this.House_Rules;
			other.Thumbnail_Url = this.Thumbnail_Url;
			other.Medium_Url = this.Medium_Url;
			other.Picture_Url = this.Picture_Url;
			other.XL_Picture_Url = this.XL_Picture_Url;
			other.Host_ID = this.Host_ID;
			other.Host_URL = this.Host_URL;
			other.Host_Name = this.Host_Name;
			other.Host_Since = this.Host_Since;
			other.Host_Location = this.Host_Location;
			other.Host_About = this.Host_About;
			other.Host_Response_Time = this.Host_Response_Time;
			other.Host_Response_Rate = this.Host_Response_Rate;
			other.Host_Acceptance_Rate = this.Host_Acceptance_Rate;
			other.Host_Thumbnail_Url = this.Host_Thumbnail_Url;
			other.Host_Picture_Url = this.Host_Picture_Url;
			other.Host_Neighbourhood = this.Host_Neighbourhood;
			other.Host_Listings_Count = this.Host_Listings_Count;
			other.Host_Total_Listings_Count = this.Host_Total_Listings_Count;
			other.Host_Verifications = this.Host_Verifications;
			other.Street = this.Street;
			other.Neighbourhood = this.Neighbourhood;
			other.Neighbourhood_Cleansed = this.Neighbourhood_Cleansed;
			other.Neighbourhood_Group_Cleansed = this.Neighbourhood_Group_Cleansed;
			other.City = this.City;
			other.State = this.State;
			other.Zipcode = this.Zipcode;
			other.Market = this.Market;
			other.Smart_Location = this.Smart_Location;
			other.Country_Code = this.Country_Code;
			other.Country = this.Country;
			other.Latitude = this.Latitude;
			other.Longitude = this.Longitude;
			other.Property_Type = this.Property_Type;
			other.Room_Type = this.Room_Type;
			other.Accommodates = this.Accommodates;
			other.Bathrooms = this.Bathrooms;
			other.Bedrooms = this.Bedrooms;
			other.Beds = this.Beds;
			other.Bed_Type = this.Bed_Type;
			other.Amenities = this.Amenities;
			other.Square_Feet = this.Square_Feet;
			other.Price = this.Price;
			other.Weekly_Price = this.Weekly_Price;
			other.Monthly_Price = this.Monthly_Price;
			other.Security_Deposit = this.Security_Deposit;
			other.Cleaning_Fee = this.Cleaning_Fee;
			other.Guests_Included = this.Guests_Included;
			other.Extra_People = this.Extra_People;
			other.Minimum_Nights = this.Minimum_Nights;
			other.Maximum_Nights = this.Maximum_Nights;
			other.Calendar_Updated = this.Calendar_Updated;
			other.Has_Availability = this.Has_Availability;
			other.Availability_30 = this.Availability_30;
			other.Availability_60 = this.Availability_60;
			other.Availability_90 = this.Availability_90;
			other.Availability_365 = this.Availability_365;
			other.Calendar_last_Scraped = this.Calendar_last_Scraped;
			other.Number_of_Reviews = this.Number_of_Reviews;
			other.First_Review = this.First_Review;
			other.Last_Review = this.Last_Review;
			other.Review_Scores_Rating = this.Review_Scores_Rating;
			other.Review_Scores_Accuracy = this.Review_Scores_Accuracy;
			other.Review_Scores_Cleanliness = this.Review_Scores_Cleanliness;
			other.Review_Scores_Checkin = this.Review_Scores_Checkin;
			other.Review_Scores_Communication = this.Review_Scores_Communication;
			other.Review_Scores_Location = this.Review_Scores_Location;
			other.Review_Scores_Value = this.Review_Scores_Value;
			other.License = this.License;
			other.Jurisdiction_Names = this.Jurisdiction_Names;
			other.Cancellation_Policy = this.Cancellation_Policy;
			other.Calculated_host_listings_count = this.Calculated_host_listings_count;
			other.Reviews_per_Month = this.Reviews_per_Month;
			other.Geolocation = this.Geolocation;
			other.Features = this.Features;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ID = this.ID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length) {
					if (length < 1024 && commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length) {
					if (length < 1024 && commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_Job_odl_csv, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Listing_Url = readString(dis);

					this.Scrape_ID = readString(dis);

					this.Last_Scraped = readString(dis);

					this.Name = readString(dis);

					this.Summary = readString(dis);

					this.Space = readString(dis);

					this.Description = readString(dis);

					this.Experiences_Offered = readString(dis);

					this.Neighborhood_Overview = readString(dis);

					this.Notes = readString(dis);

					this.Transit = readString(dis);

					this.Access = readString(dis);

					this.Interaction = readString(dis);

					this.House_Rules = readString(dis);

					this.Thumbnail_Url = readString(dis);

					this.Medium_Url = readString(dis);

					this.Picture_Url = readString(dis);

					this.XL_Picture_Url = readString(dis);

					this.Host_ID = readString(dis);

					this.Host_URL = readString(dis);

					this.Host_Name = readString(dis);

					this.Host_Since = readString(dis);

					this.Host_Location = readString(dis);

					this.Host_About = readString(dis);

					this.Host_Response_Time = readString(dis);

					this.Host_Response_Rate = readString(dis);

					this.Host_Acceptance_Rate = readString(dis);

					this.Host_Thumbnail_Url = readString(dis);

					this.Host_Picture_Url = readString(dis);

					this.Host_Neighbourhood = readString(dis);

					this.Host_Listings_Count = readString(dis);

					this.Host_Total_Listings_Count = readString(dis);

					this.Host_Verifications = readString(dis);

					this.Street = readString(dis);

					this.Neighbourhood = readString(dis);

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.City = readString(dis);

					this.State = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					this.Smart_Location = readString(dis);

					this.Country_Code = readString(dis);

					this.Country = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					this.Accommodates = readString(dis);

					this.Bathrooms = readString(dis);

					this.Bedrooms = readString(dis);

					this.Beds = readString(dis);

					this.Bed_Type = readString(dis);

					this.Amenities = readString(dis);

					this.Square_Feet = readString(dis);

					this.Price = readString(dis);

					this.Weekly_Price = readString(dis);

					this.Monthly_Price = readString(dis);

					this.Security_Deposit = readString(dis);

					this.Cleaning_Fee = readString(dis);

					this.Guests_Included = readString(dis);

					this.Extra_People = readString(dis);

					this.Minimum_Nights = readString(dis);

					this.Maximum_Nights = readString(dis);

					this.Calendar_Updated = readString(dis);

					this.Has_Availability = readString(dis);

					this.Availability_30 = readString(dis);

					this.Availability_60 = readString(dis);

					this.Availability_90 = readString(dis);

					this.Availability_365 = readString(dis);

					this.Calendar_last_Scraped = readString(dis);

					this.Number_of_Reviews = readString(dis);

					this.First_Review = readString(dis);

					this.Last_Review = readString(dis);

					this.Review_Scores_Rating = readString(dis);

					this.Review_Scores_Accuracy = readString(dis);

					this.Review_Scores_Cleanliness = readString(dis);

					this.Review_Scores_Checkin = readString(dis);

					this.Review_Scores_Communication = readString(dis);

					this.Review_Scores_Location = readString(dis);

					this.Review_Scores_Value = readString(dis);

					this.License = readString(dis);

					this.Jurisdiction_Names = readString(dis);

					this.Cancellation_Policy = readString(dis);

					this.Calculated_host_listings_count = readString(dis);

					this.Reviews_per_Month = readString(dis);

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_Job_odl_csv) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.Listing_Url = readString(dis);

					this.Scrape_ID = readString(dis);

					this.Last_Scraped = readString(dis);

					this.Name = readString(dis);

					this.Summary = readString(dis);

					this.Space = readString(dis);

					this.Description = readString(dis);

					this.Experiences_Offered = readString(dis);

					this.Neighborhood_Overview = readString(dis);

					this.Notes = readString(dis);

					this.Transit = readString(dis);

					this.Access = readString(dis);

					this.Interaction = readString(dis);

					this.House_Rules = readString(dis);

					this.Thumbnail_Url = readString(dis);

					this.Medium_Url = readString(dis);

					this.Picture_Url = readString(dis);

					this.XL_Picture_Url = readString(dis);

					this.Host_ID = readString(dis);

					this.Host_URL = readString(dis);

					this.Host_Name = readString(dis);

					this.Host_Since = readString(dis);

					this.Host_Location = readString(dis);

					this.Host_About = readString(dis);

					this.Host_Response_Time = readString(dis);

					this.Host_Response_Rate = readString(dis);

					this.Host_Acceptance_Rate = readString(dis);

					this.Host_Thumbnail_Url = readString(dis);

					this.Host_Picture_Url = readString(dis);

					this.Host_Neighbourhood = readString(dis);

					this.Host_Listings_Count = readString(dis);

					this.Host_Total_Listings_Count = readString(dis);

					this.Host_Verifications = readString(dis);

					this.Street = readString(dis);

					this.Neighbourhood = readString(dis);

					this.Neighbourhood_Cleansed = readString(dis);

					this.Neighbourhood_Group_Cleansed = readString(dis);

					this.City = readString(dis);

					this.State = readString(dis);

					this.Zipcode = readString(dis);

					this.Market = readString(dis);

					this.Smart_Location = readString(dis);

					this.Country_Code = readString(dis);

					this.Country = readString(dis);

					this.Latitude = readString(dis);

					this.Longitude = readString(dis);

					this.Property_Type = readString(dis);

					this.Room_Type = readString(dis);

					this.Accommodates = readString(dis);

					this.Bathrooms = readString(dis);

					this.Bedrooms = readString(dis);

					this.Beds = readString(dis);

					this.Bed_Type = readString(dis);

					this.Amenities = readString(dis);

					this.Square_Feet = readString(dis);

					this.Price = readString(dis);

					this.Weekly_Price = readString(dis);

					this.Monthly_Price = readString(dis);

					this.Security_Deposit = readString(dis);

					this.Cleaning_Fee = readString(dis);

					this.Guests_Included = readString(dis);

					this.Extra_People = readString(dis);

					this.Minimum_Nights = readString(dis);

					this.Maximum_Nights = readString(dis);

					this.Calendar_Updated = readString(dis);

					this.Has_Availability = readString(dis);

					this.Availability_30 = readString(dis);

					this.Availability_60 = readString(dis);

					this.Availability_90 = readString(dis);

					this.Availability_365 = readString(dis);

					this.Calendar_last_Scraped = readString(dis);

					this.Number_of_Reviews = readString(dis);

					this.First_Review = readString(dis);

					this.Last_Review = readString(dis);

					this.Review_Scores_Rating = readString(dis);

					this.Review_Scores_Accuracy = readString(dis);

					this.Review_Scores_Cleanliness = readString(dis);

					this.Review_Scores_Checkin = readString(dis);

					this.Review_Scores_Communication = readString(dis);

					this.Review_Scores_Location = readString(dis);

					this.Review_Scores_Value = readString(dis);

					this.License = readString(dis);

					this.Jurisdiction_Names = readString(dis);

					this.Cancellation_Policy = readString(dis);

					this.Calculated_host_listings_count = readString(dis);

					this.Reviews_per_Month = readString(dis);

					this.Geolocation = readString(dis);

					this.Features = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Listing_Url, dos);

				// String

				writeString(this.Scrape_ID, dos);

				// String

				writeString(this.Last_Scraped, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Summary, dos);

				// String

				writeString(this.Space, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.Experiences_Offered, dos);

				// String

				writeString(this.Neighborhood_Overview, dos);

				// String

				writeString(this.Notes, dos);

				// String

				writeString(this.Transit, dos);

				// String

				writeString(this.Access, dos);

				// String

				writeString(this.Interaction, dos);

				// String

				writeString(this.House_Rules, dos);

				// String

				writeString(this.Thumbnail_Url, dos);

				// String

				writeString(this.Medium_Url, dos);

				// String

				writeString(this.Picture_Url, dos);

				// String

				writeString(this.XL_Picture_Url, dos);

				// String

				writeString(this.Host_ID, dos);

				// String

				writeString(this.Host_URL, dos);

				// String

				writeString(this.Host_Name, dos);

				// String

				writeString(this.Host_Since, dos);

				// String

				writeString(this.Host_Location, dos);

				// String

				writeString(this.Host_About, dos);

				// String

				writeString(this.Host_Response_Time, dos);

				// String

				writeString(this.Host_Response_Rate, dos);

				// String

				writeString(this.Host_Acceptance_Rate, dos);

				// String

				writeString(this.Host_Thumbnail_Url, dos);

				// String

				writeString(this.Host_Picture_Url, dos);

				// String

				writeString(this.Host_Neighbourhood, dos);

				// String

				writeString(this.Host_Listings_Count, dos);

				// String

				writeString(this.Host_Total_Listings_Count, dos);

				// String

				writeString(this.Host_Verifications, dos);

				// String

				writeString(this.Street, dos);

				// String

				writeString(this.Neighbourhood, dos);

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.State, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// String

				writeString(this.Smart_Location, dos);

				// String

				writeString(this.Country_Code, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// String

				writeString(this.Accommodates, dos);

				// String

				writeString(this.Bathrooms, dos);

				// String

				writeString(this.Bedrooms, dos);

				// String

				writeString(this.Beds, dos);

				// String

				writeString(this.Bed_Type, dos);

				// String

				writeString(this.Amenities, dos);

				// String

				writeString(this.Square_Feet, dos);

				// String

				writeString(this.Price, dos);

				// String

				writeString(this.Weekly_Price, dos);

				// String

				writeString(this.Monthly_Price, dos);

				// String

				writeString(this.Security_Deposit, dos);

				// String

				writeString(this.Cleaning_Fee, dos);

				// String

				writeString(this.Guests_Included, dos);

				// String

				writeString(this.Extra_People, dos);

				// String

				writeString(this.Minimum_Nights, dos);

				// String

				writeString(this.Maximum_Nights, dos);

				// String

				writeString(this.Calendar_Updated, dos);

				// String

				writeString(this.Has_Availability, dos);

				// String

				writeString(this.Availability_30, dos);

				// String

				writeString(this.Availability_60, dos);

				// String

				writeString(this.Availability_90, dos);

				// String

				writeString(this.Availability_365, dos);

				// String

				writeString(this.Calendar_last_Scraped, dos);

				// String

				writeString(this.Number_of_Reviews, dos);

				// String

				writeString(this.First_Review, dos);

				// String

				writeString(this.Last_Review, dos);

				// String

				writeString(this.Review_Scores_Rating, dos);

				// String

				writeString(this.Review_Scores_Accuracy, dos);

				// String

				writeString(this.Review_Scores_Cleanliness, dos);

				// String

				writeString(this.Review_Scores_Checkin, dos);

				// String

				writeString(this.Review_Scores_Communication, dos);

				// String

				writeString(this.Review_Scores_Location, dos);

				// String

				writeString(this.Review_Scores_Value, dos);

				// String

				writeString(this.License, dos);

				// String

				writeString(this.Jurisdiction_Names, dos);

				// String

				writeString(this.Cancellation_Policy, dos);

				// String

				writeString(this.Calculated_host_listings_count, dos);

				// String

				writeString(this.Reviews_per_Month, dos);

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// String

				writeString(this.Listing_Url, dos);

				// String

				writeString(this.Scrape_ID, dos);

				// String

				writeString(this.Last_Scraped, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Summary, dos);

				// String

				writeString(this.Space, dos);

				// String

				writeString(this.Description, dos);

				// String

				writeString(this.Experiences_Offered, dos);

				// String

				writeString(this.Neighborhood_Overview, dos);

				// String

				writeString(this.Notes, dos);

				// String

				writeString(this.Transit, dos);

				// String

				writeString(this.Access, dos);

				// String

				writeString(this.Interaction, dos);

				// String

				writeString(this.House_Rules, dos);

				// String

				writeString(this.Thumbnail_Url, dos);

				// String

				writeString(this.Medium_Url, dos);

				// String

				writeString(this.Picture_Url, dos);

				// String

				writeString(this.XL_Picture_Url, dos);

				// String

				writeString(this.Host_ID, dos);

				// String

				writeString(this.Host_URL, dos);

				// String

				writeString(this.Host_Name, dos);

				// String

				writeString(this.Host_Since, dos);

				// String

				writeString(this.Host_Location, dos);

				// String

				writeString(this.Host_About, dos);

				// String

				writeString(this.Host_Response_Time, dos);

				// String

				writeString(this.Host_Response_Rate, dos);

				// String

				writeString(this.Host_Acceptance_Rate, dos);

				// String

				writeString(this.Host_Thumbnail_Url, dos);

				// String

				writeString(this.Host_Picture_Url, dos);

				// String

				writeString(this.Host_Neighbourhood, dos);

				// String

				writeString(this.Host_Listings_Count, dos);

				// String

				writeString(this.Host_Total_Listings_Count, dos);

				// String

				writeString(this.Host_Verifications, dos);

				// String

				writeString(this.Street, dos);

				// String

				writeString(this.Neighbourhood, dos);

				// String

				writeString(this.Neighbourhood_Cleansed, dos);

				// String

				writeString(this.Neighbourhood_Group_Cleansed, dos);

				// String

				writeString(this.City, dos);

				// String

				writeString(this.State, dos);

				// String

				writeString(this.Zipcode, dos);

				// String

				writeString(this.Market, dos);

				// String

				writeString(this.Smart_Location, dos);

				// String

				writeString(this.Country_Code, dos);

				// String

				writeString(this.Country, dos);

				// String

				writeString(this.Latitude, dos);

				// String

				writeString(this.Longitude, dos);

				// String

				writeString(this.Property_Type, dos);

				// String

				writeString(this.Room_Type, dos);

				// String

				writeString(this.Accommodates, dos);

				// String

				writeString(this.Bathrooms, dos);

				// String

				writeString(this.Bedrooms, dos);

				// String

				writeString(this.Beds, dos);

				// String

				writeString(this.Bed_Type, dos);

				// String

				writeString(this.Amenities, dos);

				// String

				writeString(this.Square_Feet, dos);

				// String

				writeString(this.Price, dos);

				// String

				writeString(this.Weekly_Price, dos);

				// String

				writeString(this.Monthly_Price, dos);

				// String

				writeString(this.Security_Deposit, dos);

				// String

				writeString(this.Cleaning_Fee, dos);

				// String

				writeString(this.Guests_Included, dos);

				// String

				writeString(this.Extra_People, dos);

				// String

				writeString(this.Minimum_Nights, dos);

				// String

				writeString(this.Maximum_Nights, dos);

				// String

				writeString(this.Calendar_Updated, dos);

				// String

				writeString(this.Has_Availability, dos);

				// String

				writeString(this.Availability_30, dos);

				// String

				writeString(this.Availability_60, dos);

				// String

				writeString(this.Availability_90, dos);

				// String

				writeString(this.Availability_365, dos);

				// String

				writeString(this.Calendar_last_Scraped, dos);

				// String

				writeString(this.Number_of_Reviews, dos);

				// String

				writeString(this.First_Review, dos);

				// String

				writeString(this.Last_Review, dos);

				// String

				writeString(this.Review_Scores_Rating, dos);

				// String

				writeString(this.Review_Scores_Accuracy, dos);

				// String

				writeString(this.Review_Scores_Cleanliness, dos);

				// String

				writeString(this.Review_Scores_Checkin, dos);

				// String

				writeString(this.Review_Scores_Communication, dos);

				// String

				writeString(this.Review_Scores_Location, dos);

				// String

				writeString(this.Review_Scores_Value, dos);

				// String

				writeString(this.License, dos);

				// String

				writeString(this.Jurisdiction_Names, dos);

				// String

				writeString(this.Cancellation_Policy, dos);

				// String

				writeString(this.Calculated_host_listings_count, dos);

				// String

				writeString(this.Reviews_per_Month, dos);

				// String

				writeString(this.Geolocation, dos);

				// String

				writeString(this.Features, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Listing_Url=" + Listing_Url);
			sb.append(",Scrape_ID=" + Scrape_ID);
			sb.append(",Last_Scraped=" + Last_Scraped);
			sb.append(",Name=" + Name);
			sb.append(",Summary=" + Summary);
			sb.append(",Space=" + Space);
			sb.append(",Description=" + Description);
			sb.append(",Experiences_Offered=" + Experiences_Offered);
			sb.append(",Neighborhood_Overview=" + Neighborhood_Overview);
			sb.append(",Notes=" + Notes);
			sb.append(",Transit=" + Transit);
			sb.append(",Access=" + Access);
			sb.append(",Interaction=" + Interaction);
			sb.append(",House_Rules=" + House_Rules);
			sb.append(",Thumbnail_Url=" + Thumbnail_Url);
			sb.append(",Medium_Url=" + Medium_Url);
			sb.append(",Picture_Url=" + Picture_Url);
			sb.append(",XL_Picture_Url=" + XL_Picture_Url);
			sb.append(",Host_ID=" + Host_ID);
			sb.append(",Host_URL=" + Host_URL);
			sb.append(",Host_Name=" + Host_Name);
			sb.append(",Host_Since=" + Host_Since);
			sb.append(",Host_Location=" + Host_Location);
			sb.append(",Host_About=" + Host_About);
			sb.append(",Host_Response_Time=" + Host_Response_Time);
			sb.append(",Host_Response_Rate=" + Host_Response_Rate);
			sb.append(",Host_Acceptance_Rate=" + Host_Acceptance_Rate);
			sb.append(",Host_Thumbnail_Url=" + Host_Thumbnail_Url);
			sb.append(",Host_Picture_Url=" + Host_Picture_Url);
			sb.append(",Host_Neighbourhood=" + Host_Neighbourhood);
			sb.append(",Host_Listings_Count=" + Host_Listings_Count);
			sb.append(",Host_Total_Listings_Count=" + Host_Total_Listings_Count);
			sb.append(",Host_Verifications=" + Host_Verifications);
			sb.append(",Street=" + Street);
			sb.append(",Neighbourhood=" + Neighbourhood);
			sb.append(",Neighbourhood_Cleansed=" + Neighbourhood_Cleansed);
			sb.append(",Neighbourhood_Group_Cleansed=" + Neighbourhood_Group_Cleansed);
			sb.append(",City=" + City);
			sb.append(",State=" + State);
			sb.append(",Zipcode=" + Zipcode);
			sb.append(",Market=" + Market);
			sb.append(",Smart_Location=" + Smart_Location);
			sb.append(",Country_Code=" + Country_Code);
			sb.append(",Country=" + Country);
			sb.append(",Latitude=" + Latitude);
			sb.append(",Longitude=" + Longitude);
			sb.append(",Property_Type=" + Property_Type);
			sb.append(",Room_Type=" + Room_Type);
			sb.append(",Accommodates=" + Accommodates);
			sb.append(",Bathrooms=" + Bathrooms);
			sb.append(",Bedrooms=" + Bedrooms);
			sb.append(",Beds=" + Beds);
			sb.append(",Bed_Type=" + Bed_Type);
			sb.append(",Amenities=" + Amenities);
			sb.append(",Square_Feet=" + Square_Feet);
			sb.append(",Price=" + Price);
			sb.append(",Weekly_Price=" + Weekly_Price);
			sb.append(",Monthly_Price=" + Monthly_Price);
			sb.append(",Security_Deposit=" + Security_Deposit);
			sb.append(",Cleaning_Fee=" + Cleaning_Fee);
			sb.append(",Guests_Included=" + Guests_Included);
			sb.append(",Extra_People=" + Extra_People);
			sb.append(",Minimum_Nights=" + Minimum_Nights);
			sb.append(",Maximum_Nights=" + Maximum_Nights);
			sb.append(",Calendar_Updated=" + Calendar_Updated);
			sb.append(",Has_Availability=" + Has_Availability);
			sb.append(",Availability_30=" + Availability_30);
			sb.append(",Availability_60=" + Availability_60);
			sb.append(",Availability_90=" + Availability_90);
			sb.append(",Availability_365=" + Availability_365);
			sb.append(",Calendar_last_Scraped=" + Calendar_last_Scraped);
			sb.append(",Number_of_Reviews=" + Number_of_Reviews);
			sb.append(",First_Review=" + First_Review);
			sb.append(",Last_Review=" + Last_Review);
			sb.append(",Review_Scores_Rating=" + Review_Scores_Rating);
			sb.append(",Review_Scores_Accuracy=" + Review_Scores_Accuracy);
			sb.append(",Review_Scores_Cleanliness=" + Review_Scores_Cleanliness);
			sb.append(",Review_Scores_Checkin=" + Review_Scores_Checkin);
			sb.append(",Review_Scores_Communication=" + Review_Scores_Communication);
			sb.append(",Review_Scores_Location=" + Review_Scores_Location);
			sb.append(",Review_Scores_Value=" + Review_Scores_Value);
			sb.append(",License=" + License);
			sb.append(",Jurisdiction_Names=" + Jurisdiction_Names);
			sb.append(",Cancellation_Policy=" + Cancellation_Policy);
			sb.append(",Calculated_host_listings_count=" + Calculated_host_listings_count);
			sb.append(",Reviews_per_Month=" + Reviews_per_Month);
			sb.append(",Geolocation=" + Geolocation);
			sb.append(",Features=" + Features);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				row2Struct row3 = row2;

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"D:/Users/diana/Desktop/KC_DW-ETL/workspace/ETL_DATA_WOMANS_COMPANY/Fuente Externa/Output/salida.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				String[] headColutFileOutputDelimited_1 = new String[36];
				class CSVBasicSet_tFileOutputDelimited_1 {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited_1[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited_1[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited_1[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException("Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited_1[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
						} else {
							throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
				csvSettings_tFileOutputDelimited_1.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "UTF-8")));
				CsvWritertFileOutputDelimited_1.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
				if (!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter()
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
						&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
					CsvWritertFileOutputDelimited_1.setLineEnd("" + csvSettings_tFileOutputDelimited_1.getRowDelim());
				}
				if (filetFileOutputDelimited_1.length() == 0) {
					headColutFileOutputDelimited_1[0] = "ID";
					headColutFileOutputDelimited_1[1] = "Host_ID";
					headColutFileOutputDelimited_1[2] = "Host_Response_Rate";
					headColutFileOutputDelimited_1[3] = "Host_Listings_Count";
					headColutFileOutputDelimited_1[4] = "Host_Total_Listings_Count";
					headColutFileOutputDelimited_1[5] = "Neighbourhood_Cleansed";
					headColutFileOutputDelimited_1[6] = "Neighbourhood_Group_Cleansed";
					headColutFileOutputDelimited_1[7] = "Zipcode";
					headColutFileOutputDelimited_1[8] = "Market";
					headColutFileOutputDelimited_1[9] = "Latitude";
					headColutFileOutputDelimited_1[10] = "Longitude";
					headColutFileOutputDelimited_1[11] = "Property_Type";
					headColutFileOutputDelimited_1[12] = "Room_Type";
					headColutFileOutputDelimited_1[13] = "Accommodates";
					headColutFileOutputDelimited_1[14] = "Bathrooms";
					headColutFileOutputDelimited_1[15] = "Bedrooms";
					headColutFileOutputDelimited_1[16] = "Beds";
					headColutFileOutputDelimited_1[17] = "Price";
					headColutFileOutputDelimited_1[18] = "Weekly_Price";
					headColutFileOutputDelimited_1[19] = "Monthly_Price";
					headColutFileOutputDelimited_1[20] = "Guests_Included";
					headColutFileOutputDelimited_1[21] = "Extra_People";
					headColutFileOutputDelimited_1[22] = "Minimum_Nights";
					headColutFileOutputDelimited_1[23] = "Maximum_Nights";
					headColutFileOutputDelimited_1[24] = "Number_of_Reviews";
					headColutFileOutputDelimited_1[25] = "Review_Scores_Rating";
					headColutFileOutputDelimited_1[26] = "Review_Scores_Accuracy";
					headColutFileOutputDelimited_1[27] = "Review_Scores_Cleanliness";
					headColutFileOutputDelimited_1[28] = "Review_Scores_Checkin";
					headColutFileOutputDelimited_1[29] = "Review_Scores_Communication";
					headColutFileOutputDelimited_1[30] = "Review_Scores_Location";
					headColutFileOutputDelimited_1[31] = "Review_Scores_Value";
					headColutFileOutputDelimited_1[32] = "Cancellation_Policy";
					headColutFileOutputDelimited_1[33] = "Reviews_per_Month";
					headColutFileOutputDelimited_1[34] = "Geolocation";
					headColutFileOutputDelimited_1[35] = "Features";
					CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
					CsvWritertFileOutputDelimited_1.flush();
				}
				CsvWritertFileOutputDelimited_1.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
				CsvWritertFileOutputDelimited_1.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
				CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[36];

					public void addRow(String[] row) {

						for (int i = 0; i < 36; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 35 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 35 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|%17$-");
							sbformat.append(colLengths[16]);
							sbformat.append("s");

							sbformat.append("|%18$-");
							sbformat.append(colLengths[17]);
							sbformat.append("s");

							sbformat.append("|%19$-");
							sbformat.append(colLengths[18]);
							sbformat.append("s");

							sbformat.append("|%20$-");
							sbformat.append(colLengths[19]);
							sbformat.append("s");

							sbformat.append("|%21$-");
							sbformat.append(colLengths[20]);
							sbformat.append("s");

							sbformat.append("|%22$-");
							sbformat.append(colLengths[21]);
							sbformat.append("s");

							sbformat.append("|%23$-");
							sbformat.append(colLengths[22]);
							sbformat.append("s");

							sbformat.append("|%24$-");
							sbformat.append(colLengths[23]);
							sbformat.append("s");

							sbformat.append("|%25$-");
							sbformat.append(colLengths[24]);
							sbformat.append("s");

							sbformat.append("|%26$-");
							sbformat.append(colLengths[25]);
							sbformat.append("s");

							sbformat.append("|%27$-");
							sbformat.append(colLengths[26]);
							sbformat.append("s");

							sbformat.append("|%28$-");
							sbformat.append(colLengths[27]);
							sbformat.append("s");

							sbformat.append("|%29$-");
							sbformat.append(colLengths[28]);
							sbformat.append("s");

							sbformat.append("|%30$-");
							sbformat.append(colLengths[29]);
							sbformat.append("s");

							sbformat.append("|%31$-");
							sbformat.append(colLengths[30]);
							sbformat.append("s");

							sbformat.append("|%32$-");
							sbformat.append(colLengths[31]);
							sbformat.append("s");

							sbformat.append("|%33$-");
							sbformat.append(colLengths[32]);
							sbformat.append("s");

							sbformat.append("|%34$-");
							sbformat.append(colLengths[33]);
							sbformat.append("s");

							sbformat.append("|%35$-");
							sbformat.append(colLengths[34]);
							sbformat.append("s");

							sbformat.append("|%36$-");
							sbformat.append(colLengths[35]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[35] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("<b>Flujo_de_salida</b><br><b>__UNIQUE_NAME__</b>");
				util_tLogRow_1.addRow(new String[] { "ID", "Host_ID", "Host_Response_Rate", "Host_Listings_Count",
						"Host_Total_Listings_Count", "Neighbourhood_Cleansed", "Neighbourhood_Group_Cleansed",
						"Zipcode", "Market", "Latitude", "Longitude", "Property_Type", "Room_Type", "Accommodates",
						"Bathrooms", "Bedrooms", "Beds", "Price", "Weekly_Price", "Monthly_Price", "Guests_Included",
						"Extra_People", "Minimum_Nights", "Maximum_Nights", "Number_of_Reviews", "Review_Scores_Rating",
						"Review_Scores_Accuracy", "Review_Scores_Cleanliness", "Review_Scores_Checkin",
						"Review_Scores_Communication", "Review_Scores_Location", "Review_Scores_Value",
						"Cancellation_Policy", "Reviews_per_Month", "Geolocation", "Features", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"D:/Users/diana/Desktop/KC_DW-ETL/workspace/ETL_DATA_WOMANS_COMPANY/Fuente Externa/Input/airbnb-listings.csv"/**
																																		 * End
																																		 * field
																																		 * tFileInputDelimited_1:FILENAME
																																		 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_1),
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_1),
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.ID = null;

								row1.Listing_Url = null;

								row1.Scrape_ID = null;

								row1.Last_Scraped = null;

								row1.Name = null;

								row1.Summary = null;

								row1.Space = null;

								row1.Description = null;

								row1.Experiences_Offered = null;

								row1.Neighborhood_Overview = null;

								row1.Notes = null;

								row1.Transit = null;

								row1.Access = null;

								row1.Interaction = null;

								row1.House_Rules = null;

								row1.Thumbnail_Url = null;

								row1.Medium_Url = null;

								row1.Picture_Url = null;

								row1.XL_Picture_Url = null;

								row1.Host_ID = null;

								row1.Host_URL = null;

								row1.Host_Name = null;

								row1.Host_Since = null;

								row1.Host_Location = null;

								row1.Host_About = null;

								row1.Host_Response_Time = null;

								row1.Host_Response_Rate = null;

								row1.Host_Acceptance_Rate = null;

								row1.Host_Thumbnail_Url = null;

								row1.Host_Picture_Url = null;

								row1.Host_Neighbourhood = null;

								row1.Host_Listings_Count = null;

								row1.Host_Total_Listings_Count = null;

								row1.Host_Verifications = null;

								row1.Street = null;

								row1.Neighbourhood = null;

								row1.Neighbourhood_Cleansed = null;

								row1.Neighbourhood_Group_Cleansed = null;

								row1.City = null;

								row1.State = null;

								row1.Zipcode = null;

								row1.Market = null;

								row1.Smart_Location = null;

								row1.Country_Code = null;

								row1.Country = null;

								row1.Latitude = null;

								row1.Longitude = null;

								row1.Property_Type = null;

								row1.Room_Type = null;

								row1.Accommodates = null;

								row1.Bathrooms = null;

								row1.Bedrooms = null;

								row1.Beds = null;

								row1.Bed_Type = null;

								row1.Amenities = null;

								row1.Square_Feet = null;

								row1.Price = null;

								row1.Weekly_Price = null;

								row1.Monthly_Price = null;

								row1.Security_Deposit = null;

								row1.Cleaning_Fee = null;

								row1.Guests_Included = null;

								row1.Extra_People = null;

								row1.Minimum_Nights = null;

								row1.Maximum_Nights = null;

								row1.Calendar_Updated = null;

								row1.Has_Availability = null;

								row1.Availability_30 = null;

								row1.Availability_60 = null;

								row1.Availability_90 = null;

								row1.Availability_365 = null;

								row1.Calendar_last_Scraped = null;

								row1.Number_of_Reviews = null;

								row1.First_Review = null;

								row1.Last_Review = null;

								row1.Review_Scores_Rating = null;

								row1.Review_Scores_Accuracy = null;

								row1.Review_Scores_Cleanliness = null;

								row1.Review_Scores_Checkin = null;

								row1.Review_Scores_Communication = null;

								row1.Review_Scores_Location = null;

								row1.Review_Scores_Value = null;

								row1.License = null;

								row1.Jurisdiction_Names = null;

								row1.Cancellation_Policy = null;

								row1.Calculated_host_listings_count = null;

								row1.Reviews_per_Month = null;

								row1.Geolocation = null;

								row1.Features = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row1.ID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
													',', '.'));

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID", "row1",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row1.ID = null;

									}

								} else {

									row1.ID = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Listing_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Listing_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Scrape_ID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Scrape_ID = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Last_Scraped = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Last_Scraped = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Name = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Summary = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Summary = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Space = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Space = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Description = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Description = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Experiences_Offered = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Experiences_Offered = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Neighborhood_Overview = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Neighborhood_Overview = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Notes = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Notes = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Transit = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Transit = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Access = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Access = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Interaction = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Interaction = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.House_Rules = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.House_Rules = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Thumbnail_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Thumbnail_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Medium_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Medium_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Picture_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Picture_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.XL_Picture_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.XL_Picture_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_ID = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_ID = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_URL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_URL = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Name = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Since = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Since = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Location = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Location = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_About = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_About = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Response_Time = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Response_Time = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Response_Rate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Response_Rate = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Acceptance_Rate = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Acceptance_Rate = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 28;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Thumbnail_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Thumbnail_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 29;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Picture_Url = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Picture_Url = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 30;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Neighbourhood = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Neighbourhood = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 31;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Listings_Count = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Listings_Count = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 32;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Total_Listings_Count = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Total_Listings_Count = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 33;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Host_Verifications = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Host_Verifications = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 34;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Street = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Street = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 35;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Neighbourhood = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Neighbourhood = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 36;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Neighbourhood_Cleansed = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Neighbourhood_Cleansed = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 37;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Neighbourhood_Group_Cleansed = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Neighbourhood_Group_Cleansed = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 38;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.City = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.City = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 39;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.State = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.State = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 40;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Zipcode = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Zipcode = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 41;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Market = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Market = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 42;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Smart_Location = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Smart_Location = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 43;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Country_Code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Country_Code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 44;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Country = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Country = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 45;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Latitude = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Latitude = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 46;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Longitude = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Longitude = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 47;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Property_Type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Property_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 48;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Room_Type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Room_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 49;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Accommodates = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Accommodates = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 50;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Bathrooms = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Bathrooms = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 51;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Bedrooms = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Bedrooms = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 52;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Beds = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Beds = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 53;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Bed_Type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Bed_Type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 54;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Amenities = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Amenities = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 55;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Square_Feet = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Square_Feet = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 56;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Price = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Price = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 57;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Weekly_Price = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Weekly_Price = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 58;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Monthly_Price = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Monthly_Price = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 59;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Security_Deposit = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Security_Deposit = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 60;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Cleaning_Fee = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Cleaning_Fee = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 61;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Guests_Included = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Guests_Included = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 62;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Extra_People = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Extra_People = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 63;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Minimum_Nights = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Minimum_Nights = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 64;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Maximum_Nights = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Maximum_Nights = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 65;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Calendar_Updated = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Calendar_Updated = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 66;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Has_Availability = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Has_Availability = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 67;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Availability_30 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Availability_30 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 68;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Availability_60 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Availability_60 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 69;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Availability_90 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Availability_90 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 70;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Availability_365 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Availability_365 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 71;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Calendar_last_Scraped = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Calendar_last_Scraped = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 72;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Number_of_Reviews = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Number_of_Reviews = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 73;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.First_Review = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.First_Review = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 74;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Last_Review = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Last_Review = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 75;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Rating = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Rating = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 76;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Accuracy = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Accuracy = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 77;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Cleanliness = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Cleanliness = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 78;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Checkin = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Checkin = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 79;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Communication = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Communication = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 80;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Location = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Location = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 81;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Review_Scores_Value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Review_Scores_Value = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 82;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.License = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.License = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 83;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Jurisdiction_Names = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Jurisdiction_Names = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 84;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Cancellation_Policy = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Cancellation_Policy = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 85;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Calculated_host_listings_count = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Calculated_host_listings_count = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 86;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Reviews_per_Month = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Reviews_per_Month = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 87;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Geolocation = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Geolocation = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 88;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.Features = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row1.Features = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFilterColumns_1 main ] start
							 */

							currentComponent = "tFilterColumns_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

							row2.ID = row1.ID;

							row2.Host_ID = row1.Host_ID;

							row2.Host_Response_Rate = row1.Host_Response_Rate;

							row2.Host_Listings_Count = row1.Host_Listings_Count;

							row2.Host_Total_Listings_Count = row1.Host_Total_Listings_Count;

							row2.Neighbourhood_Cleansed = row1.Neighbourhood_Cleansed;

							row2.Neighbourhood_Group_Cleansed = row1.Neighbourhood_Group_Cleansed;

							row2.Zipcode = row1.Zipcode;

							row2.Market = row1.Market;

							row2.Latitude = row1.Latitude;

							row2.Longitude = row1.Longitude;

							row2.Property_Type = row1.Property_Type;

							row2.Room_Type = row1.Room_Type;

							row2.Accommodates = row1.Accommodates;

							row2.Bathrooms = row1.Bathrooms;

							row2.Bedrooms = row1.Bedrooms;

							row2.Beds = row1.Beds;

							row2.Price = row1.Price;

							row2.Weekly_Price = row1.Weekly_Price;

							row2.Monthly_Price = row1.Monthly_Price;

							row2.Guests_Included = row1.Guests_Included;

							row2.Extra_People = row1.Extra_People;

							row2.Minimum_Nights = row1.Minimum_Nights;

							row2.Maximum_Nights = row1.Maximum_Nights;

							row2.Number_of_Reviews = row1.Number_of_Reviews;

							row2.Review_Scores_Rating = row1.Review_Scores_Rating;

							row2.Review_Scores_Accuracy = row1.Review_Scores_Accuracy;

							row2.Review_Scores_Cleanliness = row1.Review_Scores_Cleanliness;

							row2.Review_Scores_Checkin = row1.Review_Scores_Checkin;

							row2.Review_Scores_Communication = row1.Review_Scores_Communication;

							row2.Review_Scores_Location = row1.Review_Scores_Location;

							row2.Review_Scores_Value = row1.Review_Scores_Value;

							row2.Cancellation_Policy = row1.Cancellation_Policy;

							row2.Reviews_per_Month = row1.Reviews_per_Month;

							row2.Geolocation = row1.Geolocation;

							row2.Features = row1.Features;

							nb_line_tFilterColumns_1++;

							tos_count_tFilterColumns_1++;

							/**
							 * [tFilterColumns_1 main ] stop
							 */

							/**
							 * [tFilterColumns_1 process_data_begin ] start
							 */

							currentComponent = "tFilterColumns_1";

							/**
							 * [tFilterColumns_1 process_data_begin ] stop
							 */

							/**
							 * [tLogRow_1 main ] start
							 */

							currentComponent = "tLogRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

///////////////////////		

							String[] row_tLogRow_1 = new String[36];

							if (row2.ID != null) { //
								row_tLogRow_1[0] = String.valueOf(row2.ID);

							} //

							if (row2.Host_ID != null) { //
								row_tLogRow_1[1] = String.valueOf(row2.Host_ID);

							} //

							if (row2.Host_Response_Rate != null) { //
								row_tLogRow_1[2] = String.valueOf(row2.Host_Response_Rate);

							} //

							if (row2.Host_Listings_Count != null) { //
								row_tLogRow_1[3] = String.valueOf(row2.Host_Listings_Count);

							} //

							if (row2.Host_Total_Listings_Count != null) { //
								row_tLogRow_1[4] = String.valueOf(row2.Host_Total_Listings_Count);

							} //

							if (row2.Neighbourhood_Cleansed != null) { //
								row_tLogRow_1[5] = String.valueOf(row2.Neighbourhood_Cleansed);

							} //

							if (row2.Neighbourhood_Group_Cleansed != null) { //
								row_tLogRow_1[6] = String.valueOf(row2.Neighbourhood_Group_Cleansed);

							} //

							if (row2.Zipcode != null) { //
								row_tLogRow_1[7] = String.valueOf(row2.Zipcode);

							} //

							if (row2.Market != null) { //
								row_tLogRow_1[8] = String.valueOf(row2.Market);

							} //

							if (row2.Latitude != null) { //
								row_tLogRow_1[9] = String.valueOf(row2.Latitude);

							} //

							if (row2.Longitude != null) { //
								row_tLogRow_1[10] = String.valueOf(row2.Longitude);

							} //

							if (row2.Property_Type != null) { //
								row_tLogRow_1[11] = String.valueOf(row2.Property_Type);

							} //

							if (row2.Room_Type != null) { //
								row_tLogRow_1[12] = String.valueOf(row2.Room_Type);

							} //

							if (row2.Accommodates != null) { //
								row_tLogRow_1[13] = String.valueOf(row2.Accommodates);

							} //

							if (row2.Bathrooms != null) { //
								row_tLogRow_1[14] = String.valueOf(row2.Bathrooms);

							} //

							if (row2.Bedrooms != null) { //
								row_tLogRow_1[15] = String.valueOf(row2.Bedrooms);

							} //

							if (row2.Beds != null) { //
								row_tLogRow_1[16] = String.valueOf(row2.Beds);

							} //

							if (row2.Price != null) { //
								row_tLogRow_1[17] = String.valueOf(row2.Price);

							} //

							if (row2.Weekly_Price != null) { //
								row_tLogRow_1[18] = String.valueOf(row2.Weekly_Price);

							} //

							if (row2.Monthly_Price != null) { //
								row_tLogRow_1[19] = String.valueOf(row2.Monthly_Price);

							} //

							if (row2.Guests_Included != null) { //
								row_tLogRow_1[20] = String.valueOf(row2.Guests_Included);

							} //

							if (row2.Extra_People != null) { //
								row_tLogRow_1[21] = String.valueOf(row2.Extra_People);

							} //

							if (row2.Minimum_Nights != null) { //
								row_tLogRow_1[22] = String.valueOf(row2.Minimum_Nights);

							} //

							if (row2.Maximum_Nights != null) { //
								row_tLogRow_1[23] = String.valueOf(row2.Maximum_Nights);

							} //

							if (row2.Number_of_Reviews != null) { //
								row_tLogRow_1[24] = String.valueOf(row2.Number_of_Reviews);

							} //

							if (row2.Review_Scores_Rating != null) { //
								row_tLogRow_1[25] = String.valueOf(row2.Review_Scores_Rating);

							} //

							if (row2.Review_Scores_Accuracy != null) { //
								row_tLogRow_1[26] = String.valueOf(row2.Review_Scores_Accuracy);

							} //

							if (row2.Review_Scores_Cleanliness != null) { //
								row_tLogRow_1[27] = String.valueOf(row2.Review_Scores_Cleanliness);

							} //

							if (row2.Review_Scores_Checkin != null) { //
								row_tLogRow_1[28] = String.valueOf(row2.Review_Scores_Checkin);

							} //

							if (row2.Review_Scores_Communication != null) { //
								row_tLogRow_1[29] = String.valueOf(row2.Review_Scores_Communication);

							} //

							if (row2.Review_Scores_Location != null) { //
								row_tLogRow_1[30] = String.valueOf(row2.Review_Scores_Location);

							} //

							if (row2.Review_Scores_Value != null) { //
								row_tLogRow_1[31] = String.valueOf(row2.Review_Scores_Value);

							} //

							if (row2.Cancellation_Policy != null) { //
								row_tLogRow_1[32] = String.valueOf(row2.Cancellation_Policy);

							} //

							if (row2.Reviews_per_Month != null) { //
								row_tLogRow_1[33] = String.valueOf(row2.Reviews_per_Month);

							} //

							if (row2.Geolocation != null) { //
								row_tLogRow_1[34] = String.valueOf(row2.Geolocation);

							} //

							if (row2.Features != null) { //
								row_tLogRow_1[35] = String.valueOf(row2.Features);

							} //

							util_tLogRow_1.addRow(row_tLogRow_1);
							nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

							row3 = row2;

							tos_count_tLogRow_1++;

							/**
							 * [tLogRow_1 main ] stop
							 */

							/**
							 * [tLogRow_1 process_data_begin ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							String[] rowtFileOutputDelimited_1 = new String[36];
							rowtFileOutputDelimited_1[0] = row3.ID == null ? null : String.valueOf(row3.ID);
							rowtFileOutputDelimited_1[1] = row3.Host_ID == null ? null : row3.Host_ID;
							rowtFileOutputDelimited_1[2] = row3.Host_Response_Rate == null ? null
									: row3.Host_Response_Rate;
							rowtFileOutputDelimited_1[3] = row3.Host_Listings_Count == null ? null
									: row3.Host_Listings_Count;
							rowtFileOutputDelimited_1[4] = row3.Host_Total_Listings_Count == null ? null
									: row3.Host_Total_Listings_Count;
							rowtFileOutputDelimited_1[5] = row3.Neighbourhood_Cleansed == null ? null
									: row3.Neighbourhood_Cleansed;
							rowtFileOutputDelimited_1[6] = row3.Neighbourhood_Group_Cleansed == null ? null
									: row3.Neighbourhood_Group_Cleansed;
							rowtFileOutputDelimited_1[7] = row3.Zipcode == null ? null : row3.Zipcode;
							rowtFileOutputDelimited_1[8] = row3.Market == null ? null : row3.Market;
							rowtFileOutputDelimited_1[9] = row3.Latitude == null ? null : row3.Latitude;
							rowtFileOutputDelimited_1[10] = row3.Longitude == null ? null : row3.Longitude;
							rowtFileOutputDelimited_1[11] = row3.Property_Type == null ? null : row3.Property_Type;
							rowtFileOutputDelimited_1[12] = row3.Room_Type == null ? null : row3.Room_Type;
							rowtFileOutputDelimited_1[13] = row3.Accommodates == null ? null : row3.Accommodates;
							rowtFileOutputDelimited_1[14] = row3.Bathrooms == null ? null : row3.Bathrooms;
							rowtFileOutputDelimited_1[15] = row3.Bedrooms == null ? null : row3.Bedrooms;
							rowtFileOutputDelimited_1[16] = row3.Beds == null ? null : row3.Beds;
							rowtFileOutputDelimited_1[17] = row3.Price == null ? null : row3.Price;
							rowtFileOutputDelimited_1[18] = row3.Weekly_Price == null ? null : row3.Weekly_Price;
							rowtFileOutputDelimited_1[19] = row3.Monthly_Price == null ? null : row3.Monthly_Price;
							rowtFileOutputDelimited_1[20] = row3.Guests_Included == null ? null : row3.Guests_Included;
							rowtFileOutputDelimited_1[21] = row3.Extra_People == null ? null : row3.Extra_People;
							rowtFileOutputDelimited_1[22] = row3.Minimum_Nights == null ? null : row3.Minimum_Nights;
							rowtFileOutputDelimited_1[23] = row3.Maximum_Nights == null ? null : row3.Maximum_Nights;
							rowtFileOutputDelimited_1[24] = row3.Number_of_Reviews == null ? null
									: row3.Number_of_Reviews;
							rowtFileOutputDelimited_1[25] = row3.Review_Scores_Rating == null ? null
									: row3.Review_Scores_Rating;
							rowtFileOutputDelimited_1[26] = row3.Review_Scores_Accuracy == null ? null
									: row3.Review_Scores_Accuracy;
							rowtFileOutputDelimited_1[27] = row3.Review_Scores_Cleanliness == null ? null
									: row3.Review_Scores_Cleanliness;
							rowtFileOutputDelimited_1[28] = row3.Review_Scores_Checkin == null ? null
									: row3.Review_Scores_Checkin;
							rowtFileOutputDelimited_1[29] = row3.Review_Scores_Communication == null ? null
									: row3.Review_Scores_Communication;
							rowtFileOutputDelimited_1[30] = row3.Review_Scores_Location == null ? null
									: row3.Review_Scores_Location;
							rowtFileOutputDelimited_1[31] = row3.Review_Scores_Value == null ? null
									: row3.Review_Scores_Value;
							rowtFileOutputDelimited_1[32] = row3.Cancellation_Policy == null ? null
									: row3.Cancellation_Policy;
							rowtFileOutputDelimited_1[33] = row3.Reviews_per_Month == null ? null
									: row3.Reviews_per_Month;
							rowtFileOutputDelimited_1[34] = row3.Geolocation == null ? null : row3.Geolocation;
							rowtFileOutputDelimited_1[35] = row3.Features == null ? null : row3.Features;
							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
							CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_end ] stop
							 */

							/**
							 * [tLogRow_1 process_data_end ] start
							 */

							currentComponent = "tLogRow_1";

							/**
							 * [tLogRow_1 process_data_end ] stop
							 */

							/**
							 * [tFilterColumns_1 process_data_end ] start
							 */

							currentComponent = "tFilterColumns_1";

							/**
							 * [tFilterColumns_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE", nb_line_tFilterColumns_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (CsvWritertFileOutputDelimited_1 != null) {
					CsvWritertFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Job_odl_csv Job_odl_csvClass = new Job_odl_csv();

		int exitCode = Job_odl_csvClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Job_odl_csv.class.getClassLoader().getResourceAsStream(
					"etl_data_womans_company/job_odl_csv_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Job_odl_csv.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Job_odl_csv");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 229531 characters generated by Talend Open Studio for Data Integration on the
 * 15 de febrero de 2023, 22:24:17 CET
 ************************************************************************************************/