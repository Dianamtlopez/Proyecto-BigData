// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_data_womans_company.shadowfileinputtodelimitedoutput_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ShadowFileInputToDelimitedOutput Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 8.0.1.20211109_1610
 * @status
 */
public class ShadowFileInputToDelimitedOutput implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ShadowFileInputToDelimitedOutput";
	private final String projectName = "ETL_DATA_WOMANS_COMPANY";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ShadowFileInputToDelimitedOutput.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ShadowFileInputToDelimitedOutput.this,
									new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class RowStruct implements routines.system.IPersistableRow<RowStruct> {
		final static byte[] commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput = new byte[0];
		static byte[] commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput = new byte[0];

		public String row0;

		public String getRow0() {
			return this.row0;
		}

		public String row1;

		public String getRow1() {
			return this.row1;
		}

		public String row2;

		public String getRow2() {
			return this.row2;
		}

		public String row3;

		public String getRow3() {
			return this.row3;
		}

		public String row4;

		public String getRow4() {
			return this.row4;
		}

		public String row5;

		public String getRow5() {
			return this.row5;
		}

		public String row6;

		public String getRow6() {
			return this.row6;
		}

		public String row7;

		public String getRow7() {
			return this.row7;
		}

		public String row8;

		public String getRow8() {
			return this.row8;
		}

		public String row9;

		public String getRow9() {
			return this.row9;
		}

		public String row10;

		public String getRow10() {
			return this.row10;
		}

		public String row11;

		public String getRow11() {
			return this.row11;
		}

		public String row12;

		public String getRow12() {
			return this.row12;
		}

		public String row13;

		public String getRow13() {
			return this.row13;
		}

		public String row14;

		public String getRow14() {
			return this.row14;
		}

		public String row15;

		public String getRow15() {
			return this.row15;
		}

		public String row16;

		public String getRow16() {
			return this.row16;
		}

		public String row17;

		public String getRow17() {
			return this.row17;
		}

		public String row18;

		public String getRow18() {
			return this.row18;
		}

		public String row19;

		public String getRow19() {
			return this.row19;
		}

		public String row20;

		public String getRow20() {
			return this.row20;
		}

		public String row21;

		public String getRow21() {
			return this.row21;
		}

		public String row22;

		public String getRow22() {
			return this.row22;
		}

		public String row23;

		public String getRow23() {
			return this.row23;
		}

		public String row24;

		public String getRow24() {
			return this.row24;
		}

		public String row25;

		public String getRow25() {
			return this.row25;
		}

		public String row26;

		public String getRow26() {
			return this.row26;
		}

		public String row27;

		public String getRow27() {
			return this.row27;
		}

		public String row28;

		public String getRow28() {
			return this.row28;
		}

		public String row29;

		public String getRow29() {
			return this.row29;
		}

		public String row30;

		public String getRow30() {
			return this.row30;
		}

		public String row31;

		public String getRow31() {
			return this.row31;
		}

		public String row32;

		public String getRow32() {
			return this.row32;
		}

		public String row33;

		public String getRow33() {
			return this.row33;
		}

		public String row34;

		public String getRow34() {
			return this.row34;
		}

		public String row35;

		public String getRow35() {
			return this.row35;
		}

		public String row36;

		public String getRow36() {
			return this.row36;
		}

		public String row37;

		public String getRow37() {
			return this.row37;
		}

		public String row38;

		public String getRow38() {
			return this.row38;
		}

		public String row39;

		public String getRow39() {
			return this.row39;
		}

		public String row40;

		public String getRow40() {
			return this.row40;
		}

		public String row41;

		public String getRow41() {
			return this.row41;
		}

		public String row42;

		public String getRow42() {
			return this.row42;
		}

		public String row43;

		public String getRow43() {
			return this.row43;
		}

		public String row44;

		public String getRow44() {
			return this.row44;
		}

		public String row45;

		public String getRow45() {
			return this.row45;
		}

		public String row46;

		public String getRow46() {
			return this.row46;
		}

		public String row47;

		public String getRow47() {
			return this.row47;
		}

		public String row48;

		public String getRow48() {
			return this.row48;
		}

		public String row49;

		public String getRow49() {
			return this.row49;
		}

		public String row50;

		public String getRow50() {
			return this.row50;
		}

		public String row51;

		public String getRow51() {
			return this.row51;
		}

		public String row52;

		public String getRow52() {
			return this.row52;
		}

		public String row53;

		public String getRow53() {
			return this.row53;
		}

		public String row54;

		public String getRow54() {
			return this.row54;
		}

		public String row55;

		public String getRow55() {
			return this.row55;
		}

		public String row56;

		public String getRow56() {
			return this.row56;
		}

		public String row57;

		public String getRow57() {
			return this.row57;
		}

		public String row58;

		public String getRow58() {
			return this.row58;
		}

		public String row59;

		public String getRow59() {
			return this.row59;
		}

		public String row60;

		public String getRow60() {
			return this.row60;
		}

		public String row61;

		public String getRow61() {
			return this.row61;
		}

		public String row62;

		public String getRow62() {
			return this.row62;
		}

		public String row63;

		public String getRow63() {
			return this.row63;
		}

		public String row64;

		public String getRow64() {
			return this.row64;
		}

		public String row65;

		public String getRow65() {
			return this.row65;
		}

		public String row66;

		public String getRow66() {
			return this.row66;
		}

		public String row67;

		public String getRow67() {
			return this.row67;
		}

		public String row68;

		public String getRow68() {
			return this.row68;
		}

		public String row69;

		public String getRow69() {
			return this.row69;
		}

		public String row70;

		public String getRow70() {
			return this.row70;
		}

		public String row71;

		public String getRow71() {
			return this.row71;
		}

		public String row72;

		public String getRow72() {
			return this.row72;
		}

		public String row73;

		public String getRow73() {
			return this.row73;
		}

		public String row74;

		public String getRow74() {
			return this.row74;
		}

		public String row75;

		public String getRow75() {
			return this.row75;
		}

		public String row76;

		public String getRow76() {
			return this.row76;
		}

		public String row77;

		public String getRow77() {
			return this.row77;
		}

		public String row78;

		public String getRow78() {
			return this.row78;
		}

		public String row79;

		public String getRow79() {
			return this.row79;
		}

		public String row80;

		public String getRow80() {
			return this.row80;
		}

		public String row81;

		public String getRow81() {
			return this.row81;
		}

		public String row82;

		public String getRow82() {
			return this.row82;
		}

		public String row83;

		public String getRow83() {
			return this.row83;
		}

		public String row84;

		public String getRow84() {
			return this.row84;
		}

		public String row85;

		public String getRow85() {
			return this.row85;
		}

		public String row86;

		public String getRow86() {
			return this.row86;
		}

		public String row87;

		public String getRow87() {
			return this.row87;
		}

		public String row88;

		public String getRow88() {
			return this.row88;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput.length) {
					if (length < 1024
							&& commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput, 0, length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput.length) {
					if (length < 1024
							&& commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput.length == 0) {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput = new byte[1024];
					} else {
						commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput, 0,
						length);
				strReturn = new String(commonByteArray_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput) {

				try {

					int length = 0;

					this.row0 = readString(dis);

					this.row1 = readString(dis);

					this.row2 = readString(dis);

					this.row3 = readString(dis);

					this.row4 = readString(dis);

					this.row5 = readString(dis);

					this.row6 = readString(dis);

					this.row7 = readString(dis);

					this.row8 = readString(dis);

					this.row9 = readString(dis);

					this.row10 = readString(dis);

					this.row11 = readString(dis);

					this.row12 = readString(dis);

					this.row13 = readString(dis);

					this.row14 = readString(dis);

					this.row15 = readString(dis);

					this.row16 = readString(dis);

					this.row17 = readString(dis);

					this.row18 = readString(dis);

					this.row19 = readString(dis);

					this.row20 = readString(dis);

					this.row21 = readString(dis);

					this.row22 = readString(dis);

					this.row23 = readString(dis);

					this.row24 = readString(dis);

					this.row25 = readString(dis);

					this.row26 = readString(dis);

					this.row27 = readString(dis);

					this.row28 = readString(dis);

					this.row29 = readString(dis);

					this.row30 = readString(dis);

					this.row31 = readString(dis);

					this.row32 = readString(dis);

					this.row33 = readString(dis);

					this.row34 = readString(dis);

					this.row35 = readString(dis);

					this.row36 = readString(dis);

					this.row37 = readString(dis);

					this.row38 = readString(dis);

					this.row39 = readString(dis);

					this.row40 = readString(dis);

					this.row41 = readString(dis);

					this.row42 = readString(dis);

					this.row43 = readString(dis);

					this.row44 = readString(dis);

					this.row45 = readString(dis);

					this.row46 = readString(dis);

					this.row47 = readString(dis);

					this.row48 = readString(dis);

					this.row49 = readString(dis);

					this.row50 = readString(dis);

					this.row51 = readString(dis);

					this.row52 = readString(dis);

					this.row53 = readString(dis);

					this.row54 = readString(dis);

					this.row55 = readString(dis);

					this.row56 = readString(dis);

					this.row57 = readString(dis);

					this.row58 = readString(dis);

					this.row59 = readString(dis);

					this.row60 = readString(dis);

					this.row61 = readString(dis);

					this.row62 = readString(dis);

					this.row63 = readString(dis);

					this.row64 = readString(dis);

					this.row65 = readString(dis);

					this.row66 = readString(dis);

					this.row67 = readString(dis);

					this.row68 = readString(dis);

					this.row69 = readString(dis);

					this.row70 = readString(dis);

					this.row71 = readString(dis);

					this.row72 = readString(dis);

					this.row73 = readString(dis);

					this.row74 = readString(dis);

					this.row75 = readString(dis);

					this.row76 = readString(dis);

					this.row77 = readString(dis);

					this.row78 = readString(dis);

					this.row79 = readString(dis);

					this.row80 = readString(dis);

					this.row81 = readString(dis);

					this.row82 = readString(dis);

					this.row83 = readString(dis);

					this.row84 = readString(dis);

					this.row85 = readString(dis);

					this.row86 = readString(dis);

					this.row87 = readString(dis);

					this.row88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_ETL_DATA_WOMANS_COMPANY_ShadowFileInputToDelimitedOutput) {

				try {

					int length = 0;

					this.row0 = readString(dis);

					this.row1 = readString(dis);

					this.row2 = readString(dis);

					this.row3 = readString(dis);

					this.row4 = readString(dis);

					this.row5 = readString(dis);

					this.row6 = readString(dis);

					this.row7 = readString(dis);

					this.row8 = readString(dis);

					this.row9 = readString(dis);

					this.row10 = readString(dis);

					this.row11 = readString(dis);

					this.row12 = readString(dis);

					this.row13 = readString(dis);

					this.row14 = readString(dis);

					this.row15 = readString(dis);

					this.row16 = readString(dis);

					this.row17 = readString(dis);

					this.row18 = readString(dis);

					this.row19 = readString(dis);

					this.row20 = readString(dis);

					this.row21 = readString(dis);

					this.row22 = readString(dis);

					this.row23 = readString(dis);

					this.row24 = readString(dis);

					this.row25 = readString(dis);

					this.row26 = readString(dis);

					this.row27 = readString(dis);

					this.row28 = readString(dis);

					this.row29 = readString(dis);

					this.row30 = readString(dis);

					this.row31 = readString(dis);

					this.row32 = readString(dis);

					this.row33 = readString(dis);

					this.row34 = readString(dis);

					this.row35 = readString(dis);

					this.row36 = readString(dis);

					this.row37 = readString(dis);

					this.row38 = readString(dis);

					this.row39 = readString(dis);

					this.row40 = readString(dis);

					this.row41 = readString(dis);

					this.row42 = readString(dis);

					this.row43 = readString(dis);

					this.row44 = readString(dis);

					this.row45 = readString(dis);

					this.row46 = readString(dis);

					this.row47 = readString(dis);

					this.row48 = readString(dis);

					this.row49 = readString(dis);

					this.row50 = readString(dis);

					this.row51 = readString(dis);

					this.row52 = readString(dis);

					this.row53 = readString(dis);

					this.row54 = readString(dis);

					this.row55 = readString(dis);

					this.row56 = readString(dis);

					this.row57 = readString(dis);

					this.row58 = readString(dis);

					this.row59 = readString(dis);

					this.row60 = readString(dis);

					this.row61 = readString(dis);

					this.row62 = readString(dis);

					this.row63 = readString(dis);

					this.row64 = readString(dis);

					this.row65 = readString(dis);

					this.row66 = readString(dis);

					this.row67 = readString(dis);

					this.row68 = readString(dis);

					this.row69 = readString(dis);

					this.row70 = readString(dis);

					this.row71 = readString(dis);

					this.row72 = readString(dis);

					this.row73 = readString(dis);

					this.row74 = readString(dis);

					this.row75 = readString(dis);

					this.row76 = readString(dis);

					this.row77 = readString(dis);

					this.row78 = readString(dis);

					this.row79 = readString(dis);

					this.row80 = readString(dis);

					this.row81 = readString(dis);

					this.row82 = readString(dis);

					this.row83 = readString(dis);

					this.row84 = readString(dis);

					this.row85 = readString(dis);

					this.row86 = readString(dis);

					this.row87 = readString(dis);

					this.row88 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.row0, dos);

				// String

				writeString(this.row1, dos);

				// String

				writeString(this.row2, dos);

				// String

				writeString(this.row3, dos);

				// String

				writeString(this.row4, dos);

				// String

				writeString(this.row5, dos);

				// String

				writeString(this.row6, dos);

				// String

				writeString(this.row7, dos);

				// String

				writeString(this.row8, dos);

				// String

				writeString(this.row9, dos);

				// String

				writeString(this.row10, dos);

				// String

				writeString(this.row11, dos);

				// String

				writeString(this.row12, dos);

				// String

				writeString(this.row13, dos);

				// String

				writeString(this.row14, dos);

				// String

				writeString(this.row15, dos);

				// String

				writeString(this.row16, dos);

				// String

				writeString(this.row17, dos);

				// String

				writeString(this.row18, dos);

				// String

				writeString(this.row19, dos);

				// String

				writeString(this.row20, dos);

				// String

				writeString(this.row21, dos);

				// String

				writeString(this.row22, dos);

				// String

				writeString(this.row23, dos);

				// String

				writeString(this.row24, dos);

				// String

				writeString(this.row25, dos);

				// String

				writeString(this.row26, dos);

				// String

				writeString(this.row27, dos);

				// String

				writeString(this.row28, dos);

				// String

				writeString(this.row29, dos);

				// String

				writeString(this.row30, dos);

				// String

				writeString(this.row31, dos);

				// String

				writeString(this.row32, dos);

				// String

				writeString(this.row33, dos);

				// String

				writeString(this.row34, dos);

				// String

				writeString(this.row35, dos);

				// String

				writeString(this.row36, dos);

				// String

				writeString(this.row37, dos);

				// String

				writeString(this.row38, dos);

				// String

				writeString(this.row39, dos);

				// String

				writeString(this.row40, dos);

				// String

				writeString(this.row41, dos);

				// String

				writeString(this.row42, dos);

				// String

				writeString(this.row43, dos);

				// String

				writeString(this.row44, dos);

				// String

				writeString(this.row45, dos);

				// String

				writeString(this.row46, dos);

				// String

				writeString(this.row47, dos);

				// String

				writeString(this.row48, dos);

				// String

				writeString(this.row49, dos);

				// String

				writeString(this.row50, dos);

				// String

				writeString(this.row51, dos);

				// String

				writeString(this.row52, dos);

				// String

				writeString(this.row53, dos);

				// String

				writeString(this.row54, dos);

				// String

				writeString(this.row55, dos);

				// String

				writeString(this.row56, dos);

				// String

				writeString(this.row57, dos);

				// String

				writeString(this.row58, dos);

				// String

				writeString(this.row59, dos);

				// String

				writeString(this.row60, dos);

				// String

				writeString(this.row61, dos);

				// String

				writeString(this.row62, dos);

				// String

				writeString(this.row63, dos);

				// String

				writeString(this.row64, dos);

				// String

				writeString(this.row65, dos);

				// String

				writeString(this.row66, dos);

				// String

				writeString(this.row67, dos);

				// String

				writeString(this.row68, dos);

				// String

				writeString(this.row69, dos);

				// String

				writeString(this.row70, dos);

				// String

				writeString(this.row71, dos);

				// String

				writeString(this.row72, dos);

				// String

				writeString(this.row73, dos);

				// String

				writeString(this.row74, dos);

				// String

				writeString(this.row75, dos);

				// String

				writeString(this.row76, dos);

				// String

				writeString(this.row77, dos);

				// String

				writeString(this.row78, dos);

				// String

				writeString(this.row79, dos);

				// String

				writeString(this.row80, dos);

				// String

				writeString(this.row81, dos);

				// String

				writeString(this.row82, dos);

				// String

				writeString(this.row83, dos);

				// String

				writeString(this.row84, dos);

				// String

				writeString(this.row85, dos);

				// String

				writeString(this.row86, dos);

				// String

				writeString(this.row87, dos);

				// String

				writeString(this.row88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.row0, dos);

				// String

				writeString(this.row1, dos);

				// String

				writeString(this.row2, dos);

				// String

				writeString(this.row3, dos);

				// String

				writeString(this.row4, dos);

				// String

				writeString(this.row5, dos);

				// String

				writeString(this.row6, dos);

				// String

				writeString(this.row7, dos);

				// String

				writeString(this.row8, dos);

				// String

				writeString(this.row9, dos);

				// String

				writeString(this.row10, dos);

				// String

				writeString(this.row11, dos);

				// String

				writeString(this.row12, dos);

				// String

				writeString(this.row13, dos);

				// String

				writeString(this.row14, dos);

				// String

				writeString(this.row15, dos);

				// String

				writeString(this.row16, dos);

				// String

				writeString(this.row17, dos);

				// String

				writeString(this.row18, dos);

				// String

				writeString(this.row19, dos);

				// String

				writeString(this.row20, dos);

				// String

				writeString(this.row21, dos);

				// String

				writeString(this.row22, dos);

				// String

				writeString(this.row23, dos);

				// String

				writeString(this.row24, dos);

				// String

				writeString(this.row25, dos);

				// String

				writeString(this.row26, dos);

				// String

				writeString(this.row27, dos);

				// String

				writeString(this.row28, dos);

				// String

				writeString(this.row29, dos);

				// String

				writeString(this.row30, dos);

				// String

				writeString(this.row31, dos);

				// String

				writeString(this.row32, dos);

				// String

				writeString(this.row33, dos);

				// String

				writeString(this.row34, dos);

				// String

				writeString(this.row35, dos);

				// String

				writeString(this.row36, dos);

				// String

				writeString(this.row37, dos);

				// String

				writeString(this.row38, dos);

				// String

				writeString(this.row39, dos);

				// String

				writeString(this.row40, dos);

				// String

				writeString(this.row41, dos);

				// String

				writeString(this.row42, dos);

				// String

				writeString(this.row43, dos);

				// String

				writeString(this.row44, dos);

				// String

				writeString(this.row45, dos);

				// String

				writeString(this.row46, dos);

				// String

				writeString(this.row47, dos);

				// String

				writeString(this.row48, dos);

				// String

				writeString(this.row49, dos);

				// String

				writeString(this.row50, dos);

				// String

				writeString(this.row51, dos);

				// String

				writeString(this.row52, dos);

				// String

				writeString(this.row53, dos);

				// String

				writeString(this.row54, dos);

				// String

				writeString(this.row55, dos);

				// String

				writeString(this.row56, dos);

				// String

				writeString(this.row57, dos);

				// String

				writeString(this.row58, dos);

				// String

				writeString(this.row59, dos);

				// String

				writeString(this.row60, dos);

				// String

				writeString(this.row61, dos);

				// String

				writeString(this.row62, dos);

				// String

				writeString(this.row63, dos);

				// String

				writeString(this.row64, dos);

				// String

				writeString(this.row65, dos);

				// String

				writeString(this.row66, dos);

				// String

				writeString(this.row67, dos);

				// String

				writeString(this.row68, dos);

				// String

				writeString(this.row69, dos);

				// String

				writeString(this.row70, dos);

				// String

				writeString(this.row71, dos);

				// String

				writeString(this.row72, dos);

				// String

				writeString(this.row73, dos);

				// String

				writeString(this.row74, dos);

				// String

				writeString(this.row75, dos);

				// String

				writeString(this.row76, dos);

				// String

				writeString(this.row77, dos);

				// String

				writeString(this.row78, dos);

				// String

				writeString(this.row79, dos);

				// String

				writeString(this.row80, dos);

				// String

				writeString(this.row81, dos);

				// String

				writeString(this.row82, dos);

				// String

				writeString(this.row83, dos);

				// String

				writeString(this.row84, dos);

				// String

				writeString(this.row85, dos);

				// String

				writeString(this.row86, dos);

				// String

				writeString(this.row87, dos);

				// String

				writeString(this.row88, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("row0=" + row0);
			sb.append(",row1=" + row1);
			sb.append(",row2=" + row2);
			sb.append(",row3=" + row3);
			sb.append(",row4=" + row4);
			sb.append(",row5=" + row5);
			sb.append(",row6=" + row6);
			sb.append(",row7=" + row7);
			sb.append(",row8=" + row8);
			sb.append(",row9=" + row9);
			sb.append(",row10=" + row10);
			sb.append(",row11=" + row11);
			sb.append(",row12=" + row12);
			sb.append(",row13=" + row13);
			sb.append(",row14=" + row14);
			sb.append(",row15=" + row15);
			sb.append(",row16=" + row16);
			sb.append(",row17=" + row17);
			sb.append(",row18=" + row18);
			sb.append(",row19=" + row19);
			sb.append(",row20=" + row20);
			sb.append(",row21=" + row21);
			sb.append(",row22=" + row22);
			sb.append(",row23=" + row23);
			sb.append(",row24=" + row24);
			sb.append(",row25=" + row25);
			sb.append(",row26=" + row26);
			sb.append(",row27=" + row27);
			sb.append(",row28=" + row28);
			sb.append(",row29=" + row29);
			sb.append(",row30=" + row30);
			sb.append(",row31=" + row31);
			sb.append(",row32=" + row32);
			sb.append(",row33=" + row33);
			sb.append(",row34=" + row34);
			sb.append(",row35=" + row35);
			sb.append(",row36=" + row36);
			sb.append(",row37=" + row37);
			sb.append(",row38=" + row38);
			sb.append(",row39=" + row39);
			sb.append(",row40=" + row40);
			sb.append(",row41=" + row41);
			sb.append(",row42=" + row42);
			sb.append(",row43=" + row43);
			sb.append(",row44=" + row44);
			sb.append(",row45=" + row45);
			sb.append(",row46=" + row46);
			sb.append(",row47=" + row47);
			sb.append(",row48=" + row48);
			sb.append(",row49=" + row49);
			sb.append(",row50=" + row50);
			sb.append(",row51=" + row51);
			sb.append(",row52=" + row52);
			sb.append(",row53=" + row53);
			sb.append(",row54=" + row54);
			sb.append(",row55=" + row55);
			sb.append(",row56=" + row56);
			sb.append(",row57=" + row57);
			sb.append(",row58=" + row58);
			sb.append(",row59=" + row59);
			sb.append(",row60=" + row60);
			sb.append(",row61=" + row61);
			sb.append(",row62=" + row62);
			sb.append(",row63=" + row63);
			sb.append(",row64=" + row64);
			sb.append(",row65=" + row65);
			sb.append(",row66=" + row66);
			sb.append(",row67=" + row67);
			sb.append(",row68=" + row68);
			sb.append(",row69=" + row69);
			sb.append(",row70=" + row70);
			sb.append(",row71=" + row71);
			sb.append(",row72=" + row72);
			sb.append(",row73=" + row73);
			sb.append(",row74=" + row74);
			sb.append(",row75=" + row75);
			sb.append(",row76=" + row76);
			sb.append(",row77=" + row77);
			sb.append(",row78=" + row78);
			sb.append(",row79=" + row79);
			sb.append(",row80=" + row80);
			sb.append(",row81=" + row81);
			sb.append(",row82=" + row82);
			sb.append(",row83=" + row83);
			sb.append(",row84=" + row84);
			sb.append(",row85=" + row85);
			sb.append(",row86=" + row86);
			sb.append(",row87=" + row87);
			sb.append(",row88=" + row88);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(RowStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimitedProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				RowStruct Row = new RowStruct();

				/**
				 * [tFileOutputDelimited begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited", false);
				start_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited";

				int tos_count_tFileOutputDelimited = 0;

				String fileName_tFileOutputDelimited = "";
				fileName_tFileOutputDelimited = (new java.io.File(
						"D:/Users/diana/Desktop/KC_DW-ETL/workspace/ETL_DATA_WOMANS_COMPANY/temp/preview/airbnb-listings.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited = null;
				String extension_tFileOutputDelimited = null;
				String directory_tFileOutputDelimited = null;
				if ((fileName_tFileOutputDelimited.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") < fileName_tFileOutputDelimited
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited.substring(0,
								fileName_tFileOutputDelimited.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited.lastIndexOf("."));
					}
					directory_tFileOutputDelimited = fileName_tFileOutputDelimited.substring(0,
							fileName_tFileOutputDelimited.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited.substring(0,
								fileName_tFileOutputDelimited.lastIndexOf("."));
						extension_tFileOutputDelimited = fileName_tFileOutputDelimited
								.substring(fileName_tFileOutputDelimited.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited = fileName_tFileOutputDelimited;
						extension_tFileOutputDelimited = "";
					}
					directory_tFileOutputDelimited = "";
				}
				boolean isFileGenerated_tFileOutputDelimited = true;
				java.io.File filetFileOutputDelimited = new java.io.File(fileName_tFileOutputDelimited);
				globalMap.put("tFileOutputDelimited_FILE_NAME", fileName_tFileOutputDelimited);
				String[] headColutFileOutputDelimited = new String[89];
				class CSVBasicSet_tFileOutputDelimited {
					private char field_Delim;
					private char row_Delim;
					private char escape;
					private char textEnclosure;
					private boolean useCRLFRecordDelimiter;

					public boolean isUseCRLFRecordDelimiter() {
						return useCRLFRecordDelimiter;
					}

					public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
						char field_Delim_tFileOutputDelimited[] = null;

						// support passing value (property: Field Separator) by 'context.fs' or
						// 'globalMap.get("fs")'.
						if (fieldSep.length() > 0) {
							field_Delim_tFileOutputDelimited = fieldSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Field Separator must be assigned a char.");
						}
						this.field_Delim = field_Delim_tFileOutputDelimited[0];
					}

					public char getFieldDelim() {
						if (this.field_Delim == 0) {
							setFieldSeparator(";");
						}
						return this.field_Delim;
					}

					public void setRowSeparator(String rowSep) {
						if ("\r\n".equals(rowSep)) {
							useCRLFRecordDelimiter = true;
							return;
						}
						char row_DelimtFileOutputDelimited[] = null;

						// support passing value (property: Row Separator) by 'context.rs' or
						// 'globalMap.get("rs")'.
						if (rowSep.length() > 0) {
							row_DelimtFileOutputDelimited = rowSep.toCharArray();
						} else {
							throw new IllegalArgumentException("Row Separator must be assigned a char.");
						}
						this.row_Delim = row_DelimtFileOutputDelimited[0];
					}

					public char getRowDelim() {
						if (this.row_Delim == 0) {
							setRowSeparator("\n");
						}
						return this.row_Delim;
					}

					public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
							throws IllegalArgumentException {
						if (strEscape.length() <= 0) {
							throw new IllegalArgumentException("Escape Char must be assigned a char.");
						}

						if ("".equals(strTextEnclosure))
							strTextEnclosure = "\0";
						char textEnclosure_tFileOutputDelimited[] = null;

						if (strTextEnclosure.length() > 0) {
							textEnclosure_tFileOutputDelimited = strTextEnclosure.toCharArray();
						} else {
							throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
						}

						this.textEnclosure = textEnclosure_tFileOutputDelimited[0];

						if (("\\").equals(strEscape)) {
							this.escape = '\\';
						} else if (strEscape.equals(strTextEnclosure)) {
							this.escape = this.textEnclosure;
						} else {
							// the default escape mode is double escape
							this.escape = this.textEnclosure;
						}

					}

					public char getEscapeChar() {
						return (char) this.escape;
					}

					public char getTextEnclosure() {
						return this.textEnclosure;
					}
				}

				int nb_line_tFileOutputDelimited = 0;
				int splitedFileNo_tFileOutputDelimited = 0;
				int currentRow_tFileOutputDelimited = 0;

				CSVBasicSet_tFileOutputDelimited csvSettings_tFileOutputDelimited = new CSVBasicSet_tFileOutputDelimited();
				csvSettings_tFileOutputDelimited.setFieldSeparator(";");
				csvSettings_tFileOutputDelimited.setRowSeparator("\n");
				csvSettings_tFileOutputDelimited.setEscapeAndTextEnclosure("\\", "\"");
				// create directory only if not exists
				if (directory_tFileOutputDelimited != null && directory_tFileOutputDelimited.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited = new java.io.File(directory_tFileOutputDelimited);
					if (!dir_tFileOutputDelimited.exists()) {
						dir_tFileOutputDelimited.mkdirs();
					}
				}
				com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = null;

				java.io.File fileToDelete_tFileOutputDelimited = new java.io.File(fileName_tFileOutputDelimited);
				if (fileToDelete_tFileOutputDelimited.exists()) {
					fileToDelete_tFileOutputDelimited.delete();
				}
				CsvWritertFileOutputDelimited = new com.talend.csv.CSVWriter(
						new java.io.BufferedWriter(new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(fileName_tFileOutputDelimited, false), "UTF-8")));
				CsvWritertFileOutputDelimited.setSeparator(csvSettings_tFileOutputDelimited.getFieldDelim());
				if (csvSettings_tFileOutputDelimited.isUseCRLFRecordDelimiter()) {
					CsvWritertFileOutputDelimited.setLineEnd("\r\n");
				} else {
					CsvWritertFileOutputDelimited.setLineEnd("" + csvSettings_tFileOutputDelimited.getRowDelim());
				}
				CsvWritertFileOutputDelimited.setEscapeChar(csvSettings_tFileOutputDelimited.getEscapeChar());
				CsvWritertFileOutputDelimited.setQuoteChar(csvSettings_tFileOutputDelimited.getTextEnclosure());
				CsvWritertFileOutputDelimited.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

				resourceMap.put("CsvWriter_tFileOutputDelimited", CsvWritertFileOutputDelimited);
				resourceMap.put("nb_line_tFileOutputDelimited", nb_line_tFileOutputDelimited);

				/**
				 * [tFileOutputDelimited begin ] stop
				 */

				/**
				 * [tFileInputDelimited begin ] start
				 */

				ok_Hash.put("tFileInputDelimited", false);
				start_Hash.put("tFileInputDelimited", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited";

				int tos_count_tFileInputDelimited = 0;

				final routines.system.RowState rowstate_tFileInputDelimited = new routines.system.RowState();

				int nb_line_tFileInputDelimited = 0;
				int footer_tFileInputDelimited = 0;
				int totalLinetFileInputDelimited = 0;
				int limittFileInputDelimited = 50;
				int lastLinetFileInputDelimited = -1;

				char fieldSeparator_tFileInputDelimited[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited = /** Start field tFileInputDelimited:FILENAME */
						"D:/Users/diana/Desktop/KC_DW-ETL/workspace/ETL_DATA_WOMANS_COMPANY/Fuente Externa/Input/airbnb-listings.csv"/**
																																		 * End
																																		 * field
																																		 * tFileInputDelimited:FILENAME
																																		 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited = null;

				try {

					String[] rowtFileInputDelimited = null;
					int currentLinetFileInputDelimited = 0;
					int outputLinetFileInputDelimited = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited = 0;
							if (footer_value_tFileInputDelimited > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited,
									fieldSeparator_tFileInputDelimited[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited), fieldSeparator_tFileInputDelimited[0],
									"UTF-8");
						}

						csvReadertFileInputDelimited.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited[0] != '\n')
								&& (rowSeparator_tFileInputDelimited[0] != '\r'))
							csvReadertFileInputDelimited.setLineEnd("" + rowSeparator_tFileInputDelimited[0]);

						csvReadertFileInputDelimited.setQuoteChar('\"');

						csvReadertFileInputDelimited.setEscapeChar(csvReadertFileInputDelimited.getQuoteChar());

						if (footer_tFileInputDelimited > 0) {
							for (totalLinetFileInputDelimited = 0; totalLinetFileInputDelimited < 0; totalLinetFileInputDelimited++) {
								csvReadertFileInputDelimited.readNext();
							}
							csvReadertFileInputDelimited.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited.readNext()) {

								totalLinetFileInputDelimited++;

							}
							int lastLineTemptFileInputDelimited = totalLinetFileInputDelimited
									- footer_tFileInputDelimited < 0 ? 0
											: totalLinetFileInputDelimited - footer_tFileInputDelimited;
							if (lastLinetFileInputDelimited > 0) {
								lastLinetFileInputDelimited = lastLinetFileInputDelimited < lastLineTemptFileInputDelimited
										? lastLinetFileInputDelimited
										: lastLineTemptFileInputDelimited;
							} else {
								lastLinetFileInputDelimited = lastLineTemptFileInputDelimited;
							}

							csvReadertFileInputDelimited.close();
							if (filename_tFileInputDelimited instanceof java.io.InputStream) {
								csvReadertFileInputDelimited = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited,
										fieldSeparator_tFileInputDelimited[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited),
										fieldSeparator_tFileInputDelimited[0], "UTF-8");
							}
							csvReadertFileInputDelimited.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited[0] != '\n')
									&& (rowSeparator_tFileInputDelimited[0] != '\r'))
								csvReadertFileInputDelimited.setLineEnd("" + rowSeparator_tFileInputDelimited[0]);

							csvReadertFileInputDelimited.setQuoteChar('\"');

							csvReadertFileInputDelimited.setEscapeChar(csvReadertFileInputDelimited.getQuoteChar());

						}

						if (limittFileInputDelimited != 0) {
							for (currentLinetFileInputDelimited = 0; currentLinetFileInputDelimited < 0; currentLinetFileInputDelimited++) {
								csvReadertFileInputDelimited.readNext();
							}
						}
						csvReadertFileInputDelimited.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited != 0 && csvReadertFileInputDelimited != null
							&& csvReadertFileInputDelimited.readNext()) {
						rowstate_tFileInputDelimited.reset();

						rowtFileInputDelimited = csvReadertFileInputDelimited.getValues();

						currentLinetFileInputDelimited++;

						if (lastLinetFileInputDelimited > -1
								&& currentLinetFileInputDelimited > lastLinetFileInputDelimited) {
							break;
						}
						outputLinetFileInputDelimited++;
						if (limittFileInputDelimited > 0 && outputLinetFileInputDelimited > limittFileInputDelimited) {
							break;
						}

						Row = null;

						boolean whetherReject_tFileInputDelimited = false;
						Row = new RowStruct();
						try {

							char fieldSeparator_tFileInputDelimited_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited.length == 1 && ("\015").equals(rowtFileInputDelimited[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'

								Row.row0 = null;

								Row.row1 = null;

								Row.row2 = null;

								Row.row3 = null;

								Row.row4 = null;

								Row.row5 = null;

								Row.row6 = null;

								Row.row7 = null;

								Row.row8 = null;

								Row.row9 = null;

								Row.row10 = null;

								Row.row11 = null;

								Row.row12 = null;

								Row.row13 = null;

								Row.row14 = null;

								Row.row15 = null;

								Row.row16 = null;

								Row.row17 = null;

								Row.row18 = null;

								Row.row19 = null;

								Row.row20 = null;

								Row.row21 = null;

								Row.row22 = null;

								Row.row23 = null;

								Row.row24 = null;

								Row.row25 = null;

								Row.row26 = null;

								Row.row27 = null;

								Row.row28 = null;

								Row.row29 = null;

								Row.row30 = null;

								Row.row31 = null;

								Row.row32 = null;

								Row.row33 = null;

								Row.row34 = null;

								Row.row35 = null;

								Row.row36 = null;

								Row.row37 = null;

								Row.row38 = null;

								Row.row39 = null;

								Row.row40 = null;

								Row.row41 = null;

								Row.row42 = null;

								Row.row43 = null;

								Row.row44 = null;

								Row.row45 = null;

								Row.row46 = null;

								Row.row47 = null;

								Row.row48 = null;

								Row.row49 = null;

								Row.row50 = null;

								Row.row51 = null;

								Row.row52 = null;

								Row.row53 = null;

								Row.row54 = null;

								Row.row55 = null;

								Row.row56 = null;

								Row.row57 = null;

								Row.row58 = null;

								Row.row59 = null;

								Row.row60 = null;

								Row.row61 = null;

								Row.row62 = null;

								Row.row63 = null;

								Row.row64 = null;

								Row.row65 = null;

								Row.row66 = null;

								Row.row67 = null;

								Row.row68 = null;

								Row.row69 = null;

								Row.row70 = null;

								Row.row71 = null;

								Row.row72 = null;

								Row.row73 = null;

								Row.row74 = null;

								Row.row75 = null;

								Row.row76 = null;

								Row.row77 = null;

								Row.row78 = null;

								Row.row79 = null;

								Row.row80 = null;

								Row.row81 = null;

								Row.row82 = null;

								Row.row83 = null;

								Row.row84 = null;

								Row.row85 = null;

								Row.row86 = null;

								Row.row87 = null;

								Row.row88 = null;

							} else {

								int columnIndexWithD_tFileInputDelimited = 0; // Column Index

								columnIndexWithD_tFileInputDelimited = 0;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row0 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row0 = null;

								}

								columnIndexWithD_tFileInputDelimited = 1;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row1 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row1 = null;

								}

								columnIndexWithD_tFileInputDelimited = 2;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row2 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row2 = null;

								}

								columnIndexWithD_tFileInputDelimited = 3;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row3 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row3 = null;

								}

								columnIndexWithD_tFileInputDelimited = 4;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row4 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row4 = null;

								}

								columnIndexWithD_tFileInputDelimited = 5;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row5 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row5 = null;

								}

								columnIndexWithD_tFileInputDelimited = 6;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row6 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row6 = null;

								}

								columnIndexWithD_tFileInputDelimited = 7;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row7 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row7 = null;

								}

								columnIndexWithD_tFileInputDelimited = 8;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row8 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row8 = null;

								}

								columnIndexWithD_tFileInputDelimited = 9;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row9 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row9 = null;

								}

								columnIndexWithD_tFileInputDelimited = 10;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row10 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row10 = null;

								}

								columnIndexWithD_tFileInputDelimited = 11;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row11 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row11 = null;

								}

								columnIndexWithD_tFileInputDelimited = 12;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row12 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row12 = null;

								}

								columnIndexWithD_tFileInputDelimited = 13;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row13 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row13 = null;

								}

								columnIndexWithD_tFileInputDelimited = 14;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row14 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row14 = null;

								}

								columnIndexWithD_tFileInputDelimited = 15;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row15 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row15 = null;

								}

								columnIndexWithD_tFileInputDelimited = 16;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row16 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row16 = null;

								}

								columnIndexWithD_tFileInputDelimited = 17;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row17 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row17 = null;

								}

								columnIndexWithD_tFileInputDelimited = 18;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row18 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row18 = null;

								}

								columnIndexWithD_tFileInputDelimited = 19;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row19 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row19 = null;

								}

								columnIndexWithD_tFileInputDelimited = 20;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row20 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row20 = null;

								}

								columnIndexWithD_tFileInputDelimited = 21;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row21 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row21 = null;

								}

								columnIndexWithD_tFileInputDelimited = 22;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row22 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row22 = null;

								}

								columnIndexWithD_tFileInputDelimited = 23;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row23 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row23 = null;

								}

								columnIndexWithD_tFileInputDelimited = 24;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row24 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row24 = null;

								}

								columnIndexWithD_tFileInputDelimited = 25;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row25 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row25 = null;

								}

								columnIndexWithD_tFileInputDelimited = 26;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row26 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row26 = null;

								}

								columnIndexWithD_tFileInputDelimited = 27;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row27 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row27 = null;

								}

								columnIndexWithD_tFileInputDelimited = 28;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row28 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row28 = null;

								}

								columnIndexWithD_tFileInputDelimited = 29;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row29 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row29 = null;

								}

								columnIndexWithD_tFileInputDelimited = 30;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row30 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row30 = null;

								}

								columnIndexWithD_tFileInputDelimited = 31;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row31 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row31 = null;

								}

								columnIndexWithD_tFileInputDelimited = 32;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row32 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row32 = null;

								}

								columnIndexWithD_tFileInputDelimited = 33;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row33 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row33 = null;

								}

								columnIndexWithD_tFileInputDelimited = 34;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row34 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row34 = null;

								}

								columnIndexWithD_tFileInputDelimited = 35;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row35 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row35 = null;

								}

								columnIndexWithD_tFileInputDelimited = 36;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row36 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row36 = null;

								}

								columnIndexWithD_tFileInputDelimited = 37;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row37 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row37 = null;

								}

								columnIndexWithD_tFileInputDelimited = 38;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row38 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row38 = null;

								}

								columnIndexWithD_tFileInputDelimited = 39;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row39 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row39 = null;

								}

								columnIndexWithD_tFileInputDelimited = 40;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row40 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row40 = null;

								}

								columnIndexWithD_tFileInputDelimited = 41;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row41 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row41 = null;

								}

								columnIndexWithD_tFileInputDelimited = 42;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row42 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row42 = null;

								}

								columnIndexWithD_tFileInputDelimited = 43;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row43 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row43 = null;

								}

								columnIndexWithD_tFileInputDelimited = 44;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row44 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row44 = null;

								}

								columnIndexWithD_tFileInputDelimited = 45;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row45 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row45 = null;

								}

								columnIndexWithD_tFileInputDelimited = 46;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row46 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row46 = null;

								}

								columnIndexWithD_tFileInputDelimited = 47;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row47 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row47 = null;

								}

								columnIndexWithD_tFileInputDelimited = 48;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row48 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row48 = null;

								}

								columnIndexWithD_tFileInputDelimited = 49;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row49 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row49 = null;

								}

								columnIndexWithD_tFileInputDelimited = 50;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row50 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row50 = null;

								}

								columnIndexWithD_tFileInputDelimited = 51;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row51 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row51 = null;

								}

								columnIndexWithD_tFileInputDelimited = 52;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row52 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row52 = null;

								}

								columnIndexWithD_tFileInputDelimited = 53;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row53 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row53 = null;

								}

								columnIndexWithD_tFileInputDelimited = 54;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row54 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row54 = null;

								}

								columnIndexWithD_tFileInputDelimited = 55;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row55 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row55 = null;

								}

								columnIndexWithD_tFileInputDelimited = 56;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row56 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row56 = null;

								}

								columnIndexWithD_tFileInputDelimited = 57;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row57 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row57 = null;

								}

								columnIndexWithD_tFileInputDelimited = 58;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row58 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row58 = null;

								}

								columnIndexWithD_tFileInputDelimited = 59;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row59 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row59 = null;

								}

								columnIndexWithD_tFileInputDelimited = 60;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row60 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row60 = null;

								}

								columnIndexWithD_tFileInputDelimited = 61;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row61 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row61 = null;

								}

								columnIndexWithD_tFileInputDelimited = 62;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row62 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row62 = null;

								}

								columnIndexWithD_tFileInputDelimited = 63;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row63 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row63 = null;

								}

								columnIndexWithD_tFileInputDelimited = 64;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row64 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row64 = null;

								}

								columnIndexWithD_tFileInputDelimited = 65;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row65 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row65 = null;

								}

								columnIndexWithD_tFileInputDelimited = 66;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row66 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row66 = null;

								}

								columnIndexWithD_tFileInputDelimited = 67;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row67 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row67 = null;

								}

								columnIndexWithD_tFileInputDelimited = 68;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row68 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row68 = null;

								}

								columnIndexWithD_tFileInputDelimited = 69;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row69 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row69 = null;

								}

								columnIndexWithD_tFileInputDelimited = 70;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row70 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row70 = null;

								}

								columnIndexWithD_tFileInputDelimited = 71;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row71 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row71 = null;

								}

								columnIndexWithD_tFileInputDelimited = 72;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row72 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row72 = null;

								}

								columnIndexWithD_tFileInputDelimited = 73;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row73 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row73 = null;

								}

								columnIndexWithD_tFileInputDelimited = 74;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row74 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row74 = null;

								}

								columnIndexWithD_tFileInputDelimited = 75;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row75 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row75 = null;

								}

								columnIndexWithD_tFileInputDelimited = 76;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row76 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row76 = null;

								}

								columnIndexWithD_tFileInputDelimited = 77;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row77 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row77 = null;

								}

								columnIndexWithD_tFileInputDelimited = 78;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row78 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row78 = null;

								}

								columnIndexWithD_tFileInputDelimited = 79;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row79 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row79 = null;

								}

								columnIndexWithD_tFileInputDelimited = 80;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row80 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row80 = null;

								}

								columnIndexWithD_tFileInputDelimited = 81;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row81 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row81 = null;

								}

								columnIndexWithD_tFileInputDelimited = 82;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row82 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row82 = null;

								}

								columnIndexWithD_tFileInputDelimited = 83;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row83 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row83 = null;

								}

								columnIndexWithD_tFileInputDelimited = 84;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row84 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row84 = null;

								}

								columnIndexWithD_tFileInputDelimited = 85;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row85 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row85 = null;

								}

								columnIndexWithD_tFileInputDelimited = 86;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row86 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row86 = null;

								}

								columnIndexWithD_tFileInputDelimited = 87;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row87 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row87 = null;

								}

								columnIndexWithD_tFileInputDelimited = 88;

								if (columnIndexWithD_tFileInputDelimited < rowtFileInputDelimited.length) {

									Row.row88 = rowtFileInputDelimited[columnIndexWithD_tFileInputDelimited];

								} else {

									Row.row88 = null;

								}

							}

							if (rowstate_tFileInputDelimited.getException() != null) {
								throw rowstate_tFileInputDelimited.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited = true;

							System.err.println(e.getMessage());
							Row = null;

							globalMap.put("tFileInputDelimited_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited begin ] stop
						 */

						/**
						 * [tFileInputDelimited main ] start
						 */

						currentComponent = "tFileInputDelimited";

						tos_count_tFileInputDelimited++;

						/**
						 * [tFileInputDelimited main ] stop
						 */

						/**
						 * [tFileInputDelimited process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited";

						/**
						 * [tFileInputDelimited process_data_begin ] stop
						 */
// Start of branch "Row"
						if (Row != null) {

							/**
							 * [tFileOutputDelimited main ] start
							 */

							currentComponent = "tFileOutputDelimited";

							String[] rowtFileOutputDelimited = new String[89];
							rowtFileOutputDelimited[0] = Row.row0 == null ? null : Row.row0;
							rowtFileOutputDelimited[1] = Row.row1 == null ? null : Row.row1;
							rowtFileOutputDelimited[2] = Row.row2 == null ? null : Row.row2;
							rowtFileOutputDelimited[3] = Row.row3 == null ? null : Row.row3;
							rowtFileOutputDelimited[4] = Row.row4 == null ? null : Row.row4;
							rowtFileOutputDelimited[5] = Row.row5 == null ? null : Row.row5;
							rowtFileOutputDelimited[6] = Row.row6 == null ? null : Row.row6;
							rowtFileOutputDelimited[7] = Row.row7 == null ? null : Row.row7;
							rowtFileOutputDelimited[8] = Row.row8 == null ? null : Row.row8;
							rowtFileOutputDelimited[9] = Row.row9 == null ? null : Row.row9;
							rowtFileOutputDelimited[10] = Row.row10 == null ? null : Row.row10;
							rowtFileOutputDelimited[11] = Row.row11 == null ? null : Row.row11;
							rowtFileOutputDelimited[12] = Row.row12 == null ? null : Row.row12;
							rowtFileOutputDelimited[13] = Row.row13 == null ? null : Row.row13;
							rowtFileOutputDelimited[14] = Row.row14 == null ? null : Row.row14;
							rowtFileOutputDelimited[15] = Row.row15 == null ? null : Row.row15;
							rowtFileOutputDelimited[16] = Row.row16 == null ? null : Row.row16;
							rowtFileOutputDelimited[17] = Row.row17 == null ? null : Row.row17;
							rowtFileOutputDelimited[18] = Row.row18 == null ? null : Row.row18;
							rowtFileOutputDelimited[19] = Row.row19 == null ? null : Row.row19;
							rowtFileOutputDelimited[20] = Row.row20 == null ? null : Row.row20;
							rowtFileOutputDelimited[21] = Row.row21 == null ? null : Row.row21;
							rowtFileOutputDelimited[22] = Row.row22 == null ? null : Row.row22;
							rowtFileOutputDelimited[23] = Row.row23 == null ? null : Row.row23;
							rowtFileOutputDelimited[24] = Row.row24 == null ? null : Row.row24;
							rowtFileOutputDelimited[25] = Row.row25 == null ? null : Row.row25;
							rowtFileOutputDelimited[26] = Row.row26 == null ? null : Row.row26;
							rowtFileOutputDelimited[27] = Row.row27 == null ? null : Row.row27;
							rowtFileOutputDelimited[28] = Row.row28 == null ? null : Row.row28;
							rowtFileOutputDelimited[29] = Row.row29 == null ? null : Row.row29;
							rowtFileOutputDelimited[30] = Row.row30 == null ? null : Row.row30;
							rowtFileOutputDelimited[31] = Row.row31 == null ? null : Row.row31;
							rowtFileOutputDelimited[32] = Row.row32 == null ? null : Row.row32;
							rowtFileOutputDelimited[33] = Row.row33 == null ? null : Row.row33;
							rowtFileOutputDelimited[34] = Row.row34 == null ? null : Row.row34;
							rowtFileOutputDelimited[35] = Row.row35 == null ? null : Row.row35;
							rowtFileOutputDelimited[36] = Row.row36 == null ? null : Row.row36;
							rowtFileOutputDelimited[37] = Row.row37 == null ? null : Row.row37;
							rowtFileOutputDelimited[38] = Row.row38 == null ? null : Row.row38;
							rowtFileOutputDelimited[39] = Row.row39 == null ? null : Row.row39;
							rowtFileOutputDelimited[40] = Row.row40 == null ? null : Row.row40;
							rowtFileOutputDelimited[41] = Row.row41 == null ? null : Row.row41;
							rowtFileOutputDelimited[42] = Row.row42 == null ? null : Row.row42;
							rowtFileOutputDelimited[43] = Row.row43 == null ? null : Row.row43;
							rowtFileOutputDelimited[44] = Row.row44 == null ? null : Row.row44;
							rowtFileOutputDelimited[45] = Row.row45 == null ? null : Row.row45;
							rowtFileOutputDelimited[46] = Row.row46 == null ? null : Row.row46;
							rowtFileOutputDelimited[47] = Row.row47 == null ? null : Row.row47;
							rowtFileOutputDelimited[48] = Row.row48 == null ? null : Row.row48;
							rowtFileOutputDelimited[49] = Row.row49 == null ? null : Row.row49;
							rowtFileOutputDelimited[50] = Row.row50 == null ? null : Row.row50;
							rowtFileOutputDelimited[51] = Row.row51 == null ? null : Row.row51;
							rowtFileOutputDelimited[52] = Row.row52 == null ? null : Row.row52;
							rowtFileOutputDelimited[53] = Row.row53 == null ? null : Row.row53;
							rowtFileOutputDelimited[54] = Row.row54 == null ? null : Row.row54;
							rowtFileOutputDelimited[55] = Row.row55 == null ? null : Row.row55;
							rowtFileOutputDelimited[56] = Row.row56 == null ? null : Row.row56;
							rowtFileOutputDelimited[57] = Row.row57 == null ? null : Row.row57;
							rowtFileOutputDelimited[58] = Row.row58 == null ? null : Row.row58;
							rowtFileOutputDelimited[59] = Row.row59 == null ? null : Row.row59;
							rowtFileOutputDelimited[60] = Row.row60 == null ? null : Row.row60;
							rowtFileOutputDelimited[61] = Row.row61 == null ? null : Row.row61;
							rowtFileOutputDelimited[62] = Row.row62 == null ? null : Row.row62;
							rowtFileOutputDelimited[63] = Row.row63 == null ? null : Row.row63;
							rowtFileOutputDelimited[64] = Row.row64 == null ? null : Row.row64;
							rowtFileOutputDelimited[65] = Row.row65 == null ? null : Row.row65;
							rowtFileOutputDelimited[66] = Row.row66 == null ? null : Row.row66;
							rowtFileOutputDelimited[67] = Row.row67 == null ? null : Row.row67;
							rowtFileOutputDelimited[68] = Row.row68 == null ? null : Row.row68;
							rowtFileOutputDelimited[69] = Row.row69 == null ? null : Row.row69;
							rowtFileOutputDelimited[70] = Row.row70 == null ? null : Row.row70;
							rowtFileOutputDelimited[71] = Row.row71 == null ? null : Row.row71;
							rowtFileOutputDelimited[72] = Row.row72 == null ? null : Row.row72;
							rowtFileOutputDelimited[73] = Row.row73 == null ? null : Row.row73;
							rowtFileOutputDelimited[74] = Row.row74 == null ? null : Row.row74;
							rowtFileOutputDelimited[75] = Row.row75 == null ? null : Row.row75;
							rowtFileOutputDelimited[76] = Row.row76 == null ? null : Row.row76;
							rowtFileOutputDelimited[77] = Row.row77 == null ? null : Row.row77;
							rowtFileOutputDelimited[78] = Row.row78 == null ? null : Row.row78;
							rowtFileOutputDelimited[79] = Row.row79 == null ? null : Row.row79;
							rowtFileOutputDelimited[80] = Row.row80 == null ? null : Row.row80;
							rowtFileOutputDelimited[81] = Row.row81 == null ? null : Row.row81;
							rowtFileOutputDelimited[82] = Row.row82 == null ? null : Row.row82;
							rowtFileOutputDelimited[83] = Row.row83 == null ? null : Row.row83;
							rowtFileOutputDelimited[84] = Row.row84 == null ? null : Row.row84;
							rowtFileOutputDelimited[85] = Row.row85 == null ? null : Row.row85;
							rowtFileOutputDelimited[86] = Row.row86 == null ? null : Row.row86;
							rowtFileOutputDelimited[87] = Row.row87 == null ? null : Row.row87;
							rowtFileOutputDelimited[88] = Row.row88 == null ? null : Row.row88;
							nb_line_tFileOutputDelimited++;
							resourceMap.put("nb_line_tFileOutputDelimited", nb_line_tFileOutputDelimited);
							CsvWritertFileOutputDelimited.writeNext(rowtFileOutputDelimited);

							tos_count_tFileOutputDelimited++;

							/**
							 * [tFileOutputDelimited main ] stop
							 */

							/**
							 * [tFileOutputDelimited process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited";

							/**
							 * [tFileOutputDelimited process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited";

							/**
							 * [tFileOutputDelimited process_data_end ] stop
							 */

						} // End of branch "Row"

						/**
						 * [tFileInputDelimited process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited";

						/**
						 * [tFileInputDelimited process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited end ] start
						 */

						currentComponent = "tFileInputDelimited";

						nb_line_tFileInputDelimited++;
					}

				} finally {
					if (!(filename_tFileInputDelimited instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited != null) {
							csvReadertFileInputDelimited.close();
						}
					}
					if (csvReadertFileInputDelimited != null) {
						globalMap.put("tFileInputDelimited_NB_LINE", nb_line_tFileInputDelimited);
					}

				}

				ok_Hash.put("tFileInputDelimited", true);
				end_Hash.put("tFileInputDelimited", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited end ] stop
				 */

				/**
				 * [tFileOutputDelimited end ] start
				 */

				currentComponent = "tFileOutputDelimited";

				if (CsvWritertFileOutputDelimited != null) {
					CsvWritertFileOutputDelimited.close();
				}

				globalMap.put("tFileOutputDelimited_NB_LINE", nb_line_tFileOutputDelimited);

				resourceMap.put("finish_tFileOutputDelimited", true);

				ok_Hash.put("tFileOutputDelimited", true);
				end_Hash.put("tFileOutputDelimited", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited finally ] start
				 */

				currentComponent = "tFileInputDelimited";

				/**
				 * [tFileInputDelimited finally ] stop
				 */

				/**
				 * [tFileOutputDelimited finally ] start
				 */

				currentComponent = "tFileOutputDelimited";

				if (resourceMap.get("finish_tFileOutputDelimited") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited");

					if (CsvWritertFileOutputDelimited != null) {
						CsvWritertFileOutputDelimited.close();
					}

				}

				/**
				 * [tFileOutputDelimited finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Shadow";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ShadowFileInputToDelimitedOutput ShadowFileInputToDelimitedOutputClass = new ShadowFileInputToDelimitedOutput();

		int exitCode = ShadowFileInputToDelimitedOutputClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ShadowFileInputToDelimitedOutput.class.getClassLoader()
					.getResourceAsStream("etl_data_womans_company/shadowfileinputtodelimitedoutput_0_1/contexts/"
							+ contextStr + ".properties");
			if (inContext == null) {
				inContext = ShadowFileInputToDelimitedOutput.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimitedProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited) {
			globalMap.put("tFileInputDelimited_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ShadowFileInputToDelimitedOutput");
		}

		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 128072 characters generated by Talend Open Studio for Data Integration on the
 * 15 de febrero de 2023, 19:24:17 CET
 ************************************************************************************************/